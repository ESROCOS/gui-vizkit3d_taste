#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		1  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		2  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		3  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		8  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		9  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		10  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummyBase_T;


flag asn1SccDummyBase_T_Equal(const asn1SccDummyBase_T* pVal1, const asn1SccDummyBase_T* pVal2);

void asn1SccDummyBase_T_Initialize(asn1SccDummyBase_T* pVal);

#define ERR_DUMMYBASE_T		8108  /**/
flag asn1SccDummyBase_T_IsConstraintValid(const asn1SccDummyBase_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMYBASE_T_2		8115  /**/
#define asn1SccDummyBase_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummyBase_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummyBase_T_Encode(const asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMYBASE_T_2		8116  /**/
flag asn1SccDummyBase_T_Decode(asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy2Base_T;


flag asn1SccDummy2Base_T_Equal(const asn1SccDummy2Base_T* pVal1, const asn1SccDummy2Base_T* pVal2);

void asn1SccDummy2Base_T_Initialize(asn1SccDummy2Base_T* pVal);

#define ERR_DUMMY2BASE_T		85  /**/
flag asn1SccDummy2Base_T_IsConstraintValid(const asn1SccDummy2Base_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY2BASE_T_2_2		96  /**/
#define asn1SccDummy2Base_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy2Base_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy2Base_T_Encode(const asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY2BASE_T_2_2		97  /**/
flag asn1SccDummy2Base_T_Decode(asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		15  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		16  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		17  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		22  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		23  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		24  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		29  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		30  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		31  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Double;


flag asn1SccT_Double_Equal(const asn1SccT_Double* pVal1, const asn1SccT_Double* pVal2);

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		36  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		37  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		38  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double rad;
} asn1SccBase_Angle;

flag asn1SccBase_Angle_Equal(const asn1SccBase_Angle* pVal1, const asn1SccBase_Angle* pVal2);

void asn1SccBase_Angle_Initialize(asn1SccBase_Angle* pVal);

#define ERR_BASE_ANGLE_RAD		939  /**/
flag asn1SccBase_Angle_IsConstraintValid(const asn1SccBase_Angle* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_ANGLE		950  /**/
#define ERR_UPER_ENCODE_BASE_ANGLE_RAD_2		946  /**/
#define asn1SccBase_Angle_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Angle_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Angle_Encode(const asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_ANGLE		951  /**/
#define ERR_UPER_DECODE_BASE_ANGLE_RAD_2		947  /**/
flag asn1SccBase_Angle_Decode(asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
} asn1SccBase_commands_Motion2D;

flag asn1SccBase_commands_Motion2D_Equal(const asn1SccBase_commands_Motion2D* pVal1, const asn1SccBase_commands_Motion2D* pVal2);

void asn1SccBase_commands_Motion2D_Initialize(asn1SccBase_commands_Motion2D* pVal);

#define ERR_BASE_COMMANDS_MOTION2D_TRANSLATION		1604  /**/
#define ERR_BASE_COMMANDS_MOTION2D_ROTATION		1615  /**/
#define ERR_BASE_COMMANDS_MOTION2D_HEADING_RAD		1626  /**/
flag asn1SccBase_commands_Motion2D_IsConstraintValid(const asn1SccBase_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D		1647  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1611  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1622  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_HEADING_2		1643  /**/
#define asn1SccBase_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccBase_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccBase_commands_Motion2D_Encode(const asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D		1648  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1612  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1623  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_HEADING_2		1644  /**/
flag asn1SccBase_commands_Motion2D_Decode(asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;
} asn1SccBase_PoseUpdateThreshold;

flag asn1SccBase_PoseUpdateThreshold_Equal(const asn1SccBase_PoseUpdateThreshold* pVal1, const asn1SccBase_PoseUpdateThreshold* pVal2);

void asn1SccBase_PoseUpdateThreshold_Initialize(asn1SccBase_PoseUpdateThreshold* pVal);

#define ERR_BASE_POSEUPDATETHRESHOLD_DISTANCE		1062  /**/
#define ERR_BASE_POSEUPDATETHRESHOLD_ANGLE		1073  /**/
flag asn1SccBase_PoseUpdateThreshold_IsConstraintValid(const asn1SccBase_PoseUpdateThreshold* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD		1084  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		1069  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		1080  /**/
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208

flag asn1SccBase_PoseUpdateThreshold_Encode(const asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD		1085  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		1070  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		1081  /**/
flag asn1SccBase_PoseUpdateThreshold_Decode(asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double kelvin;
} asn1SccBase_Temperature;

flag asn1SccBase_Temperature_Equal(const asn1SccBase_Temperature* pVal1, const asn1SccBase_Temperature* pVal2);

void asn1SccBase_Temperature_Initialize(asn1SccBase_Temperature* pVal);

#define ERR_BASE_TEMPERATURE_KELVIN		1107  /**/
flag asn1SccBase_Temperature_IsConstraintValid(const asn1SccBase_Temperature* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TEMPERATURE		1118  /**/
#define ERR_UPER_ENCODE_BASE_TEMPERATURE_KELVIN_2		1114  /**/
#define asn1SccBase_Temperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Temperature_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Temperature_Encode(const asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TEMPERATURE		1119  /**/
#define ERR_UPER_DECODE_BASE_TEMPERATURE_KELVIN_2		1115  /**/
flag asn1SccBase_Temperature_Decode(asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double surge;
    asn1SccT_Double sway;
    asn1SccT_Double heave;
    asn1SccT_Double roll;
    asn1SccT_Double pitch;
    asn1SccT_Double yaw;
} asn1SccBase_commands_Speed6D;

flag asn1SccBase_commands_Speed6D_Equal(const asn1SccBase_commands_Speed6D* pVal1, const asn1SccBase_commands_Speed6D* pVal2);

void asn1SccBase_commands_Speed6D_Initialize(asn1SccBase_commands_Speed6D* pVal);

#define ERR_BASE_COMMANDS_SPEED6D_SURGE		1653  /**/
#define ERR_BASE_COMMANDS_SPEED6D_SWAY		1664  /**/
#define ERR_BASE_COMMANDS_SPEED6D_HEAVE		1675  /**/
#define ERR_BASE_COMMANDS_SPEED6D_ROLL		1686  /**/
#define ERR_BASE_COMMANDS_SPEED6D_PITCH		1697  /**/
#define ERR_BASE_COMMANDS_SPEED6D_YAW		1708  /**/
flag asn1SccBase_commands_Speed6D_IsConstraintValid(const asn1SccBase_commands_Speed6D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D		1719  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SURGE_2		1660  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SWAY_2		1671  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1682  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_ROLL_2		1693  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_PITCH_2		1704  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_YAW_2		1715  /**/
#define asn1SccBase_commands_Speed6D_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccBase_commands_Speed6D_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccBase_commands_Speed6D_Encode(const asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D		1720  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SURGE_2		1661  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SWAY_2		1672  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1683  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_ROLL_2		1694  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_PITCH_2		1705  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_YAW_2		1716  /**/
flag asn1SccBase_commands_Speed6D_Decode(asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_AngleAxisd_axis;

typedef struct {
    asn1SccT_Double angle;
    asn1SccWrappers_AngleAxisd_axis axis;
} asn1SccWrappers_AngleAxisd;

flag asn1SccWrappers_AngleAxisd_axis_Equal(const asn1SccWrappers_AngleAxisd_axis* pVal1, const asn1SccWrappers_AngleAxisd_axis* pVal2);

flag asn1SccWrappers_AngleAxisd_Equal(const asn1SccWrappers_AngleAxisd* pVal1, const asn1SccWrappers_AngleAxisd* pVal2);

void asn1SccWrappers_AngleAxisd_axis_Initialize(asn1SccWrappers_AngleAxisd_axis* pVal);
void asn1SccWrappers_AngleAxisd_Initialize(asn1SccWrappers_AngleAxisd* pVal);

#define ERR_WRAPPERS_ANGLEAXISD_ANGLE		5639  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS_ELM		5650  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS		5661  /**/
flag asn1SccWrappers_AngleAxisd_IsConstraintValid(const asn1SccWrappers_AngleAxisd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD		5668  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5646  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS		5662  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5657  /**/
#define asn1SccWrappers_AngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_AngleAxisd_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_AngleAxisd_Encode(const asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD		5669  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5647  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS		5663  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5658  /**/
flag asn1SccWrappers_AngleAxisd_Decode(asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccWrappers_Vector2d_data;

typedef struct {
    asn1SccWrappers_Vector2d_data data;
} asn1SccWrappers_Vector2d;

flag asn1SccWrappers_Vector2d_data_Equal(const asn1SccWrappers_Vector2d_data* pVal1, const asn1SccWrappers_Vector2d_data* pVal2);

flag asn1SccWrappers_Vector2d_Equal(const asn1SccWrappers_Vector2d* pVal1, const asn1SccWrappers_Vector2d* pVal2);

void asn1SccWrappers_Vector2d_data_Initialize(asn1SccWrappers_Vector2d_data* pVal);
void asn1SccWrappers_Vector2d_Initialize(asn1SccWrappers_Vector2d* pVal);

#define ERR_WRAPPERS_VECTOR2D_DATA_ELM		5674  /**/
#define ERR_WRAPPERS_VECTOR2D_DATA		5685  /**/
flag asn1SccWrappers_Vector2d_IsConstraintValid(const asn1SccWrappers_Vector2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D		5692  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA		5686  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5681  /**/
#define asn1SccWrappers_Vector2d_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccWrappers_Vector2d_REQUIRED_BITS_FOR_ENCODING        209

flag asn1SccWrappers_Vector2d_Encode(const asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D		5693  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA		5687  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5682  /**/
flag asn1SccWrappers_Vector2d_Decode(asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;
} asn1SccBase_Pose2D;

flag asn1SccBase_Pose2D_Equal(const asn1SccBase_Pose2D* pVal1, const asn1SccBase_Pose2D* pVal2);

void asn1SccBase_Pose2D_Initialize(asn1SccBase_Pose2D* pVal);

#define ERR_BASE_POSE2D_POSITION_DATA_ELM		1017  /**/
#define ERR_BASE_POSE2D_POSITION_DATA		1028  /**/
#define ERR_BASE_POSE2D_ORIENTATION		1045  /**/
flag asn1SccBase_Pose2D_IsConstraintValid(const asn1SccBase_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D		1056  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_POSITION_2		1041  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_ORIENTATION_2		1052  /**/
#define asn1SccBase_Pose2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_Encode(const asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D		1057  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_POSITION_2		1042  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_ORIENTATION_2		1053  /**/
flag asn1SccBase_Pose2D_Decode(asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;
} asn1SccBase_Pose2D_m;

flag asn1SccBase_Pose2D_m_Equal(const asn1SccBase_Pose2D_m* pVal1, const asn1SccBase_Pose2D_m* pVal2);

void asn1SccBase_Pose2D_m_Initialize(asn1SccBase_Pose2D_m* pVal);

#define ERR_BASE_POSE2D_M_POSITION_DATA_ELM		6027  /**/
#define ERR_BASE_POSE2D_M_POSITION_DATA		6038  /**/
#define ERR_BASE_POSE2D_M_ORIENTATION		6055  /**/
flag asn1SccBase_Pose2D_m_IsConstraintValid(const asn1SccBase_Pose2D_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D_M		6066  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_POSITION_2		6051  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_ORIENTATION_2		6062  /**/
#define asn1SccBase_Pose2D_m_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_m_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_m_Encode(const asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D_M		6067  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_POSITION_2		6052  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_ORIENTATION_2		6063  /**/
flag asn1SccBase_Pose2D_m_Decode(asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Matrix2d_data;

typedef struct {
    asn1SccWrappers_Matrix2d_data data;
} asn1SccWrappers_Matrix2d;

flag asn1SccWrappers_Matrix2d_data_Equal(const asn1SccWrappers_Matrix2d_data* pVal1, const asn1SccWrappers_Matrix2d_data* pVal2);

flag asn1SccWrappers_Matrix2d_Equal(const asn1SccWrappers_Matrix2d* pVal1, const asn1SccWrappers_Matrix2d* pVal2);

void asn1SccWrappers_Matrix2d_data_Initialize(asn1SccWrappers_Matrix2d_data* pVal);
void asn1SccWrappers_Matrix2d_Initialize(asn1SccWrappers_Matrix2d* pVal);

#define ERR_WRAPPERS_MATRIX2D_DATA_ELM		5698  /**/
#define ERR_WRAPPERS_MATRIX2D_DATA		5709  /**/
flag asn1SccWrappers_Matrix2d_IsConstraintValid(const asn1SccWrappers_Matrix2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D		5716  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA		5710  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5705  /**/
#define asn1SccWrappers_Matrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Matrix2d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Matrix2d_Encode(const asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D		5717  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA		5711  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5706  /**/
flag asn1SccWrappers_Matrix2d_Decode(asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Vector3d_data;

typedef struct {
    asn1SccWrappers_Vector3d_data data;
} asn1SccWrappers_Vector3d;

flag asn1SccWrappers_Vector3d_data_Equal(const asn1SccWrappers_Vector3d_data* pVal1, const asn1SccWrappers_Vector3d_data* pVal2);

flag asn1SccWrappers_Vector3d_Equal(const asn1SccWrappers_Vector3d* pVal1, const asn1SccWrappers_Vector3d* pVal2);

void asn1SccWrappers_Vector3d_data_Initialize(asn1SccWrappers_Vector3d_data* pVal);
void asn1SccWrappers_Vector3d_Initialize(asn1SccWrappers_Vector3d* pVal);

#define ERR_WRAPPERS_VECTOR3D_DATA_ELM		5722  /**/
#define ERR_WRAPPERS_VECTOR3D_DATA		5733  /**/
flag asn1SccWrappers_Vector3d_IsConstraintValid(const asn1SccWrappers_Vector3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D		5740  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA		5734  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5729  /**/
#define asn1SccWrappers_Vector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccWrappers_Vector3d_REQUIRED_BITS_FOR_ENCODING        314

flag asn1SccWrappers_Vector3d_Encode(const asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D		5741  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA		5735  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5730  /**/
flag asn1SccWrappers_Vector3d_Decode(asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
} asn1SccBase_Wrench;

flag asn1SccBase_Wrench_Equal(const asn1SccBase_Wrench* pVal1, const asn1SccBase_Wrench* pVal2);

void asn1SccBase_Wrench_Initialize(asn1SccBase_Wrench* pVal);

#define ERR_BASE_WRENCH_FORCE_DATA_ELM		877  /**/
#define ERR_BASE_WRENCH_FORCE_DATA		888  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA_ELM		905  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA		916  /**/
flag asn1SccBase_Wrench_IsConstraintValid(const asn1SccBase_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH		933  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_FORCE_2		901  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_TORQUE_2		929  /**/
#define asn1SccBase_Wrench_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_Encode(const asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH		934  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_FORCE_2		902  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_TORQUE_2		930  /**/
flag asn1SccBase_Wrench_Decode(asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccBase_Waypoint;

flag asn1SccBase_Waypoint_Equal(const asn1SccBase_Waypoint* pVal1, const asn1SccBase_Waypoint* pVal2);

void asn1SccBase_Waypoint_Initialize(asn1SccBase_Waypoint* pVal);

#define ERR_BASE_WAYPOINT_POSITION_DATA_ELM		1248  /**/
#define ERR_BASE_WAYPOINT_POSITION_DATA		1259  /**/
#define ERR_BASE_WAYPOINT_HEADING		1276  /**/
#define ERR_BASE_WAYPOINT_TOL_POSITION		1287  /**/
#define ERR_BASE_WAYPOINT_TOL_HEADING		1298  /**/
flag asn1SccBase_Waypoint_IsConstraintValid(const asn1SccBase_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT		1309  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_POSITION_2		1272  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_HEADING_2		1283  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_POSITION_2		1294  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_HEADING_2		1305  /**/
#define asn1SccBase_Waypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_Encode(const asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT		1310  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_POSITION_2		1273  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_HEADING_2		1284  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_POSITION_2		1295  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_HEADING_2		1306  /**/
flag asn1SccBase_Waypoint_Decode(asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccBase_Waypoint_m;

flag asn1SccBase_Waypoint_m_Equal(const asn1SccBase_Waypoint_m* pVal1, const asn1SccBase_Waypoint_m* pVal2);

void asn1SccBase_Waypoint_m_Initialize(asn1SccBase_Waypoint_m* pVal);

#define ERR_BASE_WAYPOINT_M_POSITION_DATA_ELM		6336  /**/
#define ERR_BASE_WAYPOINT_M_POSITION_DATA		6347  /**/
#define ERR_BASE_WAYPOINT_M_HEADING		6364  /**/
#define ERR_BASE_WAYPOINT_M_TOL_POSITION		6375  /**/
#define ERR_BASE_WAYPOINT_M_TOL_HEADING		6386  /**/
flag asn1SccBase_Waypoint_m_IsConstraintValid(const asn1SccBase_Waypoint_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT_M		6397  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_POSITION_2		6360  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_HEADING_2		6371  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_POSITION_2		6382  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_HEADING_2		6393  /**/
#define asn1SccBase_Waypoint_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_m_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_m_Encode(const asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT_M		6398  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_POSITION_2		6361  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_HEADING_2		6372  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_POSITION_2		6383  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_HEADING_2		6394  /**/
flag asn1SccBase_Waypoint_m_Decode(asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Waypoint_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		309  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		320  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		337  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		348  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		359  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		380  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		381  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		376  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BYTES_FOR_ENCODING       15651 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BITS_FOR_ENCODING        125208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		382  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		377  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
} asn1SccBase_Wrench_m;

flag asn1SccBase_Wrench_m_Equal(const asn1SccBase_Wrench_m* pVal1, const asn1SccBase_Wrench_m* pVal2);

void asn1SccBase_Wrench_m_Initialize(asn1SccBase_Wrench_m* pVal);

#define ERR_BASE_WRENCH_M_FORCE_DATA_ELM		6403  /**/
#define ERR_BASE_WRENCH_M_FORCE_DATA		6414  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA_ELM		6431  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA		6442  /**/
flag asn1SccBase_Wrench_m_IsConstraintValid(const asn1SccBase_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH_M		6459  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_FORCE_2		6427  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_TORQUE_2		6455  /**/
#define asn1SccBase_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_m_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_m_Encode(const asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH_M		6460  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_FORCE_2		6428  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_TORQUE_2		6456  /**/
flag asn1SccBase_Wrench_m_Decode(asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		387  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		398  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		415  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		426  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		453  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		454  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		449  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BYTES_FOR_ENCODING       15701 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BITS_FOR_ENCODING        125608

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		455  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		450  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[9];
} asn1SccWrappers_Matrix3d_data;

typedef struct {
    asn1SccWrappers_Matrix3d_data data;
} asn1SccWrappers_Matrix3d;

flag asn1SccWrappers_Matrix3d_data_Equal(const asn1SccWrappers_Matrix3d_data* pVal1, const asn1SccWrappers_Matrix3d_data* pVal2);

flag asn1SccWrappers_Matrix3d_Equal(const asn1SccWrappers_Matrix3d* pVal1, const asn1SccWrappers_Matrix3d* pVal2);

void asn1SccWrappers_Matrix3d_data_Initialize(asn1SccWrappers_Matrix3d_data* pVal);
void asn1SccWrappers_Matrix3d_Initialize(asn1SccWrappers_Matrix3d* pVal);

#define ERR_WRAPPERS_MATRIX3D_DATA_ELM		5746  /**/
#define ERR_WRAPPERS_MATRIX3D_DATA		5757  /**/
flag asn1SccWrappers_Matrix3d_IsConstraintValid(const asn1SccWrappers_Matrix3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D		5764  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA		5758  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5753  /**/
#define asn1SccWrappers_Matrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define asn1SccWrappers_Matrix3d_REQUIRED_BITS_FOR_ENCODING        940

flag asn1SccWrappers_Matrix3d_Encode(const asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D		5765  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA		5759  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5754  /**/
flag asn1SccWrappers_Matrix3d_Decode(asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Vector4d_data;

typedef struct {
    asn1SccWrappers_Vector4d_data data;
} asn1SccWrappers_Vector4d;

flag asn1SccWrappers_Vector4d_data_Equal(const asn1SccWrappers_Vector4d_data* pVal1, const asn1SccWrappers_Vector4d_data* pVal2);

flag asn1SccWrappers_Vector4d_Equal(const asn1SccWrappers_Vector4d* pVal1, const asn1SccWrappers_Vector4d* pVal2);

void asn1SccWrappers_Vector4d_data_Initialize(asn1SccWrappers_Vector4d_data* pVal);
void asn1SccWrappers_Vector4d_Initialize(asn1SccWrappers_Vector4d* pVal);

#define ERR_WRAPPERS_VECTOR4D_DATA_ELM		5770  /**/
#define ERR_WRAPPERS_VECTOR4D_DATA		5781  /**/
flag asn1SccWrappers_Vector4d_IsConstraintValid(const asn1SccWrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D		5788  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA		5782  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5777  /**/
#define asn1SccWrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Vector4d_Encode(const asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D		5789  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA		5783  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5778  /**/
flag asn1SccWrappers_Vector4d_Decode(asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccStd_vector_Wrappers_Vector4d;

flag asn1SccStd_vector_Wrappers_Vector4d_Equal(const asn1SccStd_vector_Wrappers_Vector4d* pVal1, const asn1SccStd_vector_Wrappers_Vector4d* pVal2);

void asn1SccStd_vector_Wrappers_Vector4d_Initialize(asn1SccStd_vector_Wrappers_Vector4d* pVal);

#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		460  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		471  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D		488  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_IsConstraintValid(const asn1SccStd_vector_Wrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D		489  /**/
#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		484  /**/
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       10451 
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        83608

flag asn1SccStd_vector_Wrappers_Vector4d_Encode(const asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D		490  /**/
#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		485  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_Decode(asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[16];
} asn1SccWrappers_Matrix4d_data;

typedef struct {
    asn1SccWrappers_Matrix4d_data data;
} asn1SccWrappers_Matrix4d;

flag asn1SccWrappers_Matrix4d_data_Equal(const asn1SccWrappers_Matrix4d_data* pVal1, const asn1SccWrappers_Matrix4d_data* pVal2);

flag asn1SccWrappers_Matrix4d_Equal(const asn1SccWrappers_Matrix4d* pVal1, const asn1SccWrappers_Matrix4d* pVal2);

void asn1SccWrappers_Matrix4d_data_Initialize(asn1SccWrappers_Matrix4d_data* pVal);
void asn1SccWrappers_Matrix4d_Initialize(asn1SccWrappers_Matrix4d* pVal);

#define ERR_WRAPPERS_MATRIX4D_DATA_ELM		5794  /**/
#define ERR_WRAPPERS_MATRIX4D_DATA		5805  /**/
flag asn1SccWrappers_Matrix4d_IsConstraintValid(const asn1SccWrappers_Matrix4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D		5812  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA		5806  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5801  /**/
#define asn1SccWrappers_Matrix4d_REQUIRED_BYTES_FOR_ENCODING       209 
#define asn1SccWrappers_Matrix4d_REQUIRED_BITS_FOR_ENCODING        1668

flag asn1SccWrappers_Matrix4d_Encode(const asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D		5813  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA		5807  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5802  /**/
flag asn1SccWrappers_Matrix4d_Decode(asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccWrappers_Vector6d_data;

typedef struct {
    asn1SccWrappers_Vector6d_data data;
} asn1SccWrappers_Vector6d;

flag asn1SccWrappers_Vector6d_data_Equal(const asn1SccWrappers_Vector6d_data* pVal1, const asn1SccWrappers_Vector6d_data* pVal2);

flag asn1SccWrappers_Vector6d_Equal(const asn1SccWrappers_Vector6d* pVal1, const asn1SccWrappers_Vector6d* pVal2);

void asn1SccWrappers_Vector6d_data_Initialize(asn1SccWrappers_Vector6d_data* pVal);
void asn1SccWrappers_Vector6d_Initialize(asn1SccWrappers_Vector6d* pVal);

#define ERR_WRAPPERS_VECTOR6D_DATA_ELM		5818  /**/
#define ERR_WRAPPERS_VECTOR6D_DATA		5829  /**/
flag asn1SccWrappers_Vector6d_IsConstraintValid(const asn1SccWrappers_Vector6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D		5836  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA		5830  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5825  /**/
#define asn1SccWrappers_Vector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccWrappers_Vector6d_REQUIRED_BITS_FOR_ENCODING        627

flag asn1SccWrappers_Vector6d_Encode(const asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D		5837  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA		5831  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5826  /**/
flag asn1SccWrappers_Vector6d_Decode(asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[36];
} asn1SccWrappers_Matrix6d_data;

typedef struct {
    asn1SccWrappers_Matrix6d_data data;
} asn1SccWrappers_Matrix6d;

flag asn1SccWrappers_Matrix6d_data_Equal(const asn1SccWrappers_Matrix6d_data* pVal1, const asn1SccWrappers_Matrix6d_data* pVal2);

flag asn1SccWrappers_Matrix6d_Equal(const asn1SccWrappers_Matrix6d* pVal1, const asn1SccWrappers_Matrix6d* pVal2);

void asn1SccWrappers_Matrix6d_data_Initialize(asn1SccWrappers_Matrix6d_data* pVal);
void asn1SccWrappers_Matrix6d_Initialize(asn1SccWrappers_Matrix6d* pVal);

#define ERR_WRAPPERS_MATRIX6D_DATA_ELM		5842  /**/
#define ERR_WRAPPERS_MATRIX6D_DATA		5853  /**/
flag asn1SccWrappers_Matrix6d_IsConstraintValid(const asn1SccWrappers_Matrix6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D		5860  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA		5854  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5849  /**/
#define asn1SccWrappers_Matrix6d_REQUIRED_BYTES_FOR_ENCODING       469 
#define asn1SccWrappers_Matrix6d_REQUIRED_BITS_FOR_ENCODING        3750

flag asn1SccWrappers_Matrix6d_Encode(const asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D		5861  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA		5855  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5850  /**/
flag asn1SccWrappers_Matrix6d_Decode(asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TwistWithCovariance;

flag asn1SccBase_TwistWithCovariance_Equal(const asn1SccBase_TwistWithCovariance* pVal1, const asn1SccBase_TwistWithCovariance* pVal2);

void asn1SccBase_TwistWithCovariance_Initialize(asn1SccBase_TwistWithCovariance* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		787  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA		798  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		815  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA		826  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		843  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA		854  /**/
flag asn1SccBase_TwistWithCovariance_IsConstraintValid(const asn1SccBase_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE		871  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_2		811  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_2		839  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_2		867  /**/
#define asn1SccBase_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_Encode(const asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE		872  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_2		812  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_2		840  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_COV_2		868  /**/
flag asn1SccBase_TwistWithCovariance_Decode(asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TwistWithCovariance_m;

flag asn1SccBase_TwistWithCovariance_m_Equal(const asn1SccBase_TwistWithCovariance_m* pVal1, const asn1SccBase_TwistWithCovariance_m* pVal2);

void asn1SccBase_TwistWithCovariance_m_Initialize(asn1SccBase_TwistWithCovariance_m* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6246  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6257  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6274  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6285  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6302  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6313  /**/
flag asn1SccBase_TwistWithCovariance_m_IsConstraintValid(const asn1SccBase_TwistWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M		6330  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6270  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6298  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6326  /**/
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_m_Encode(const asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M		6331  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6271  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6299  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6327  /**/
flag asn1SccBase_TwistWithCovariance_m_Decode(asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_MatrixXd_data;

typedef struct {
    asn1SccT_Int32 rows;
    asn1SccT_Int32 cols;
    asn1SccWrappers_MatrixXd_data data;
} asn1SccWrappers_MatrixXd;

flag asn1SccWrappers_MatrixXd_data_Equal(const asn1SccWrappers_MatrixXd_data* pVal1, const asn1SccWrappers_MatrixXd_data* pVal2);

flag asn1SccWrappers_MatrixXd_Equal(const asn1SccWrappers_MatrixXd* pVal1, const asn1SccWrappers_MatrixXd* pVal2);

void asn1SccWrappers_MatrixXd_data_Initialize(asn1SccWrappers_MatrixXd_data* pVal);
void asn1SccWrappers_MatrixXd_Initialize(asn1SccWrappers_MatrixXd* pVal);

#define ERR_WRAPPERS_MATRIXXD_ROWS		5866  /**/
#define ERR_WRAPPERS_MATRIXXD_COLS		5877  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA_ELM		5888  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA		5899  /**/
flag asn1SccWrappers_MatrixXd_IsConstraintValid(const asn1SccWrappers_MatrixXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD		5906  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_ROWS_2		5873  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_COLS_2		5884  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA		5900  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5895  /**/
#define asn1SccWrappers_MatrixXd_REQUIRED_BYTES_FOR_ENCODING       2609 
#define asn1SccWrappers_MatrixXd_REQUIRED_BITS_FOR_ENCODING        20872

flag asn1SccWrappers_MatrixXd_Encode(const asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD		5907  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_ROWS_2		5874  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_COLS_2		5885  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA		5901  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5896  /**/
flag asn1SccWrappers_MatrixXd_Decode(asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Quaterniond_im;

typedef struct {
    asn1SccWrappers_Quaterniond_im im;
    asn1SccT_Double re;
} asn1SccWrappers_Quaterniond;

flag asn1SccWrappers_Quaterniond_im_Equal(const asn1SccWrappers_Quaterniond_im* pVal1, const asn1SccWrappers_Quaterniond_im* pVal2);

flag asn1SccWrappers_Quaterniond_Equal(const asn1SccWrappers_Quaterniond* pVal1, const asn1SccWrappers_Quaterniond* pVal2);

void asn1SccWrappers_Quaterniond_im_Initialize(asn1SccWrappers_Quaterniond_im* pVal);
void asn1SccWrappers_Quaterniond_Initialize(asn1SccWrappers_Quaterniond* pVal);

#define ERR_WRAPPERS_QUATERNIOND_IM_ELM		5912  /**/
#define ERR_WRAPPERS_QUATERNIOND_IM		5923  /**/
#define ERR_WRAPPERS_QUATERNIOND_RE		5930  /**/
flag asn1SccWrappers_Quaterniond_IsConstraintValid(const asn1SccWrappers_Quaterniond* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND		5941  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM		5924  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5919  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_RE_2		5937  /**/
#define asn1SccWrappers_Quaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Quaterniond_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Quaterniond_Encode(const asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND		5942  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM		5925  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5920  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_RE_2		5938  /**/
flag asn1SccWrappers_Quaterniond_Decode(asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;
} asn1SccBase_Pose;

flag asn1SccBase_Pose_Equal(const asn1SccBase_Pose* pVal1, const asn1SccBase_Pose* pVal2);

void asn1SccBase_Pose_Initialize(asn1SccBase_Pose* pVal);

#define ERR_BASE_POSE_POSITION_DATA_ELM		613  /**/
#define ERR_BASE_POSE_POSITION_DATA		624  /**/
#define ERR_BASE_POSE_ORIENTATION_IM_ELM		641  /**/
#define ERR_BASE_POSE_ORIENTATION_IM		652  /**/
#define ERR_BASE_POSE_ORIENTATION_RE		659  /**/
flag asn1SccBase_Pose_IsConstraintValid(const asn1SccBase_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE		680  /**/
#define ERR_UPER_ENCODE_BASE_POSE_POSITION_2		637  /**/
#define ERR_UPER_ENCODE_BASE_POSE_ORIENTATION_2		676  /**/
#define asn1SccBase_Pose_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_Encode(const asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE		681  /**/
#define ERR_UPER_DECODE_BASE_POSE_POSITION_2		638  /**/
#define ERR_UPER_DECODE_BASE_POSE_ORIENTATION_2		677  /**/
flag asn1SccBase_Pose_Decode(asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TransformWithCovariance;

flag asn1SccBase_TransformWithCovariance_Equal(const asn1SccBase_TransformWithCovariance* pVal1, const asn1SccBase_TransformWithCovariance* pVal2);

void asn1SccBase_TransformWithCovariance_Initialize(asn1SccBase_TransformWithCovariance* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		686  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		697  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		714  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		725  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		732  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		753  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		764  /**/
flag asn1SccBase_TransformWithCovariance_IsConstraintValid(const asn1SccBase_TransformWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE		781  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		710  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		749  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		777  /**/
#define asn1SccBase_TransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_Encode(const asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE		782  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		711  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		750  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		778  /**/
flag asn1SccBase_TransformWithCovariance_Decode(asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;
} asn1SccBase_Pose_m;

flag asn1SccBase_Pose_m_Equal(const asn1SccBase_Pose_m* pVal1, const asn1SccBase_Pose_m* pVal2);

void asn1SccBase_Pose_m_Initialize(asn1SccBase_Pose_m* pVal);

#define ERR_BASE_POSE_M_POSITION_DATA_ELM		6072  /**/
#define ERR_BASE_POSE_M_POSITION_DATA		6083  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM_ELM		6100  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM		6111  /**/
#define ERR_BASE_POSE_M_ORIENTATION_RE		6118  /**/
flag asn1SccBase_Pose_m_IsConstraintValid(const asn1SccBase_Pose_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE_M		6139  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_POSITION_2		6096  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_ORIENTATION_2		6135  /**/
#define asn1SccBase_Pose_m_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_m_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_m_Encode(const asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE_M		6140  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_POSITION_2		6097  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_ORIENTATION_2		6136  /**/
flag asn1SccBase_Pose_m_Decode(asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TransformWithCovariance_m;

flag asn1SccBase_TransformWithCovariance_m_Equal(const asn1SccBase_TransformWithCovariance_m* pVal1, const asn1SccBase_TransformWithCovariance_m* pVal2);

void asn1SccBase_TransformWithCovariance_m_Initialize(asn1SccBase_TransformWithCovariance_m* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6145  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6156  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6173  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6184  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6191  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6212  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6223  /**/
flag asn1SccBase_TransformWithCovariance_m_IsConstraintValid(const asn1SccBase_TransformWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M		6240  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6169  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6208  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6236  /**/
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_m_Encode(const asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M		6241  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6170  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6209  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6237  /**/
flag asn1SccBase_TransformWithCovariance_m_Decode(asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_VectorXd_data;

typedef struct {
    asn1SccWrappers_VectorXd_data data;
} asn1SccWrappers_VectorXd;

flag asn1SccWrappers_VectorXd_data_Equal(const asn1SccWrappers_VectorXd_data* pVal1, const asn1SccWrappers_VectorXd_data* pVal2);

flag asn1SccWrappers_VectorXd_Equal(const asn1SccWrappers_VectorXd* pVal1, const asn1SccWrappers_VectorXd* pVal2);

void asn1SccWrappers_VectorXd_data_Initialize(asn1SccWrappers_VectorXd_data* pVal);
void asn1SccWrappers_VectorXd_Initialize(asn1SccWrappers_VectorXd* pVal);

#define ERR_WRAPPERS_VECTORXD_DATA_ELM		5947  /**/
#define ERR_WRAPPERS_VECTORXD_DATA		5958  /**/
flag asn1SccWrappers_VectorXd_IsConstraintValid(const asn1SccWrappers_VectorXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD		5965  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA		5959  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA_ELM_2		5954  /**/
#define asn1SccWrappers_VectorXd_REQUIRED_BYTES_FOR_ENCODING       2601 
#define asn1SccWrappers_VectorXd_REQUIRED_BITS_FOR_ENCODING        20808

flag asn1SccWrappers_VectorXd_Encode(const asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTORXD		5966  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA		5960  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA_ELM_2		5955  /**/
flag asn1SccWrappers_VectorXd_Decode(asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Float;


flag asn1SccT_Float_Equal(const asn1SccT_Float* pVal1, const asn1SccT_Float* pVal2);

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		43  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		44  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		45  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double position;
    asn1SccT_Float speed;
    asn1SccT_Float effort;
    asn1SccT_Float raw;
    asn1SccT_Float acceleration;
} asn1SccBase_JointState;

flag asn1SccBase_JointState_Equal(const asn1SccBase_JointState* pVal1, const asn1SccBase_JointState* pVal2);

void asn1SccBase_JointState_Initialize(asn1SccBase_JointState* pVal);

#define ERR_BASE_JOINTSTATE_POSITION		956  /**/
#define ERR_BASE_JOINTSTATE_SPEED		967  /**/
#define ERR_BASE_JOINTSTATE_EFFORT		978  /**/
#define ERR_BASE_JOINTSTATE_RAW		989  /**/
#define ERR_BASE_JOINTSTATE_ACCELERATION		1000  /**/
flag asn1SccBase_JointState_IsConstraintValid(const asn1SccBase_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE		1011  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_POSITION_2		963  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_SPEED_2		974  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_EFFORT_2		985  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_RAW_2		996  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_ACCELERATION_2		1007  /**/
#define asn1SccBase_JointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccBase_JointState_REQUIRED_BITS_FOR_ENCODING        520

flag asn1SccBase_JointState_Encode(const asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE		1012  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_POSITION_2		964  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_SPEED_2		975  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_EFFORT_2		986  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_RAW_2		997  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_ACCELERATION_2		1008  /**/
flag asn1SccBase_JointState_Decode(asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_JointState arr[200];
} asn1SccBase_JointTrajectory;

flag asn1SccBase_JointTrajectory_Equal(const asn1SccBase_JointTrajectory* pVal1, const asn1SccBase_JointTrajectory* pVal2);

void asn1SccBase_JointTrajectory_Initialize(asn1SccBase_JointTrajectory* pVal);

#define ERR_BASE_JOINTTRAJECTORY_ELM_POSITION		170  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_SPEED		181  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_EFFORT		192  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_RAW		203  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		214  /**/
#define ERR_BASE_JOINTTRAJECTORY		235  /**/
flag asn1SccBase_JointTrajectory_IsConstraintValid(const asn1SccBase_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY		236  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY_ELM_2		231  /**/
#define asn1SccBase_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       13001 
#define asn1SccBase_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        104008

flag asn1SccBase_JointTrajectory_Encode(const asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY		237  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY_ELM_2		232  /**/
flag asn1SccBase_JointTrajectory_Decode(asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_JointState min;
    asn1SccBase_JointState max;
} asn1SccBase_JointLimitRange;

flag asn1SccBase_JointLimitRange_Equal(const asn1SccBase_JointLimitRange* pVal1, const asn1SccBase_JointLimitRange* pVal2);

void asn1SccBase_JointLimitRange_Initialize(asn1SccBase_JointLimitRange* pVal);

#define ERR_BASE_JOINTLIMITRANGE_MIN_POSITION		1315  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_SPEED		1326  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_EFFORT		1337  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_RAW		1348  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1359  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_POSITION		1380  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_SPEED		1391  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_EFFORT		1402  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_RAW		1413  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1424  /**/
flag asn1SccBase_JointLimitRange_IsConstraintValid(const asn1SccBase_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE		1445  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MIN_2		1376  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MAX_2		1441  /**/
#define asn1SccBase_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccBase_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040

flag asn1SccBase_JointLimitRange_Encode(const asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE		1446  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MIN_2		1377  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MAX_2		1442  /**/
flag asn1SccBase_JointLimitRange_Decode(asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float pascal;
} asn1SccBase_Pressure;

flag asn1SccBase_Pressure_Equal(const asn1SccBase_Pressure* pVal1, const asn1SccBase_Pressure* pVal2);

void asn1SccBase_Pressure_Initialize(asn1SccBase_Pressure* pVal);

#define ERR_BASE_PRESSURE_PASCAL		1090  /**/
flag asn1SccBase_Pressure_IsConstraintValid(const asn1SccBase_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_PRESSURE		1101  /**/
#define ERR_UPER_ENCODE_BASE_PRESSURE_PASCAL_2		1097  /**/
#define asn1SccBase_Pressure_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Pressure_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Pressure_Encode(const asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_PRESSURE		1102  /**/
#define ERR_UPER_DECODE_BASE_PRESSURE_PASCAL_2		1098  /**/
flag asn1SccBase_Pressure_Decode(asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int16;


flag asn1SccT_Int16_Equal(const asn1SccT_Int16* pVal1, const asn1SccT_Int16* pVal2);

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		50  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		51  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		52  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


flag asn1SccT_UInt16_Equal(const asn1SccT_UInt16* pVal1, const asn1SccT_UInt16* pVal2);

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		57  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		58  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		59  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
} asn1SccBase_samples_frame_frame_size_t;

flag asn1SccBase_samples_frame_frame_size_t_Equal(const asn1SccBase_samples_frame_frame_size_t* pVal1, const asn1SccBase_samples_frame_frame_size_t* pVal2);

void asn1SccBase_samples_frame_frame_size_t_Initialize(asn1SccBase_samples_frame_frame_size_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2392  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2403  /**/
flag asn1SccBase_samples_frame_frame_size_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_size_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2414  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2399  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2410  /**/
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccBase_samples_frame_frame_size_t_Encode(const asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2415  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2400  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2411  /**/
flag asn1SccBase_samples_frame_frame_size_t_Decode(asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


flag asn1SccT_UInt64_Equal(const asn1SccT_UInt64* pVal1, const asn1SccT_UInt64* pVal2);

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		64  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		65  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		66  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int64;


flag asn1SccT_Int64_Equal(const asn1SccT_Int64* pVal1, const asn1SccT_Int64* pVal2);

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);

#define ERR_T_INT64		71  /**/
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		72  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Int64_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		73  /**/
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Int64 microseconds;
} asn1SccBase_Time;

flag asn1SccBase_Time_Equal(const asn1SccBase_Time* pVal1, const asn1SccBase_Time* pVal2);

void asn1SccBase_Time_Initialize(asn1SccBase_Time* pVal);

#define ERR_BASE_TIME_MICROSECONDS		1124  /**/
flag asn1SccBase_Time_IsConstraintValid(const asn1SccBase_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME		1135  /**/
#define ERR_UPER_ENCODE_BASE_TIME_MICROSECONDS_2		1131  /**/
#define asn1SccBase_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccBase_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccBase_Time_Encode(const asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME		1136  /**/
#define ERR_UPER_DECODE_BASE_TIME_MICROSECONDS_2		1132  /**/
flag asn1SccBase_Time_Decode(asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;
} asn1SccBase_TimeStamped_Base_commands_Motion2D;

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Equal(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal1, const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal2);

void asn1SccBase_TimeStamped_Base_commands_Motion2D_Initialize(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal);

#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1451  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1462  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1473  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1494  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_IsConstraintValid(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1515  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1458  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1469  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1490  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1511  /**/
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Encode(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1516  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1459  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1470  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1491  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1512  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Decode(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;
} asn1SccBase_LinearAngular6DCommand;

flag asn1SccBase_LinearAngular6DCommand_Equal(const asn1SccBase_LinearAngular6DCommand* pVal1, const asn1SccBase_LinearAngular6DCommand* pVal2);

void asn1SccBase_LinearAngular6DCommand_Initialize(asn1SccBase_LinearAngular6DCommand* pVal);

#define ERR_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1521  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1542  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1553  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1570  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1581  /**/
flag asn1SccBase_LinearAngular6DCommand_IsConstraintValid(const asn1SccBase_LinearAngular6DCommand* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND		1598  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1538  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1566  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1594  /**/
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_LinearAngular6DCommand_Encode(const asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND		1599  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1539  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1567  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1595  /**/
flag asn1SccBase_LinearAngular6DCommand_Decode(asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance pose;
    asn1SccBase_TwistWithCovariance velocity;
} asn1SccBase_samples_BodyState;

flag asn1SccBase_samples_BodyState_Equal(const asn1SccBase_samples_BodyState* pVal1, const asn1SccBase_samples_BodyState* pVal2);

void asn1SccBase_samples_BodyState_Initialize(asn1SccBase_samples_BodyState* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1725  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1746  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1757  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1774  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1785  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1792  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1813  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1824  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1851  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1862  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1879  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1890  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1907  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1918  /**/
flag asn1SccBase_samples_BodyState_IsConstraintValid(const asn1SccBase_samples_BodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE		1945  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_TIME_2		1742  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_2		1847  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1941  /**/
#define asn1SccBase_samples_BodyState_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_Encode(const asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE		1946  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_TIME_2		1743  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_POSE_2		1848  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1942  /**/
flag asn1SccBase_samples_BodyState_Decode(asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;
} asn1SccBase_samples_IMUSensors;

flag asn1SccBase_samples_IMUSensors_Equal(const asn1SccBase_samples_IMUSensors* pVal1, const asn1SccBase_samples_IMUSensors* pVal2);

void asn1SccBase_samples_IMUSensors_Initialize(asn1SccBase_samples_IMUSensors* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1951  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1972  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1983  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		2000  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		2011  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		2028  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA		2039  /**/
flag asn1SccBase_samples_IMUSensors_IsConstraintValid(const asn1SccBase_samples_IMUSensors* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS		2056  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1968  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1996  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		2024  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_2		2052  /**/
#define asn1SccBase_samples_IMUSensors_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_Encode(const asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS		2057  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1969  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1997  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		2025  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_2		2053  /**/
flag asn1SccBase_samples_IMUSensors_Decode(asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;
} asn1SccBase_samples_Motion2D;

flag asn1SccBase_samples_Motion2D_Equal(const asn1SccBase_samples_Motion2D* pVal1, const asn1SccBase_samples_Motion2D* pVal2);

void asn1SccBase_samples_Motion2D_Initialize(asn1SccBase_samples_Motion2D* pVal);

#define ERR_BASE_SAMPLES_MOTION2D_TRANSLATION		2062  /**/
#define ERR_BASE_SAMPLES_MOTION2D_ROTATION		2073  /**/
#define ERR_BASE_SAMPLES_MOTION2D_HEADING_RAD		2084  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2105  /**/
flag asn1SccBase_samples_Motion2D_IsConstraintValid(const asn1SccBase_samples_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D		2126  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		2069  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_ROTATION_2		2080  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_HEADING_2		2101  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TIME_2		2122  /**/
#define asn1SccBase_samples_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_samples_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_samples_Motion2D_Encode(const asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D		2127  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		2070  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_ROTATION_2		2081  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_HEADING_2		2102  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TIME_2		2123  /**/
flag asn1SccBase_samples_Motion2D_Decode(asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float pascal;
    asn1SccBase_Time time;
} asn1SccBase_samples_Pressure;

flag asn1SccBase_samples_Pressure_Equal(const asn1SccBase_samples_Pressure* pVal1, const asn1SccBase_samples_Pressure* pVal2);

void asn1SccBase_samples_Pressure_Initialize(asn1SccBase_samples_Pressure* pVal);

#define ERR_BASE_SAMPLES_PRESSURE_PASCAL		2132  /**/
#define ERR_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2143  /**/
flag asn1SccBase_samples_Pressure_IsConstraintValid(const asn1SccBase_samples_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE		2164  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2139  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_TIME_2		2160  /**/
#define asn1SccBase_samples_Pressure_REQUIRED_BYTES_FOR_ENCODING       21 
#define asn1SccBase_samples_Pressure_REQUIRED_BITS_FOR_ENCODING        168

flag asn1SccBase_samples_Pressure_Encode(const asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE		2165  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2140  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_TIME_2		2161  /**/
flag asn1SccBase_samples_Pressure_Decode(asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;
} asn1SccBase_samples_RigidBodyAcceleration;

flag asn1SccBase_samples_RigidBodyAcceleration_Equal(const asn1SccBase_samples_RigidBodyAcceleration* pVal1, const asn1SccBase_samples_RigidBodyAcceleration* pVal2);

void asn1SccBase_samples_RigidBodyAcceleration_Initialize(asn1SccBase_samples_RigidBodyAcceleration* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2170  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2191  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2202  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2219  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2230  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2247  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2258  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2275  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2286  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2303  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2187  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2215  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2243  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2271  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2299  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_Encode(const asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2304  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2188  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2216  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2244  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2272  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2300  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_Decode(asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrench;

flag asn1SccBase_samples_Wrench_Equal(const asn1SccBase_samples_Wrench* pVal1, const asn1SccBase_samples_Wrench* pVal2);

void asn1SccBase_samples_Wrench_Initialize(asn1SccBase_samples_Wrench* pVal);

#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2309  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA		2320  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2337  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA		2348  /**/
#define ERR_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2365  /**/
flag asn1SccBase_samples_Wrench_IsConstraintValid(const asn1SccBase_samples_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH		2386  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_FORCE_2		2333  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_2		2361  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TIME_2		2382  /**/
#define asn1SccBase_samples_Wrench_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_Encode(const asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH		2387  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_FORCE_2		2334  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TORQUE_2		2362  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TIME_2		2383  /**/
flag asn1SccBase_samples_Wrench_Decode(asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DistanceImage_data;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
    asn1SccT_Float scale_x;
    asn1SccT_Float scale_y;
    asn1SccT_Float center_x;
    asn1SccT_Float center_y;
    asn1SccBase_samples_DistanceImage_data data;
} asn1SccBase_samples_DistanceImage;

flag asn1SccBase_samples_DistanceImage_data_Equal(const asn1SccBase_samples_DistanceImage_data* pVal1, const asn1SccBase_samples_DistanceImage_data* pVal2);

flag asn1SccBase_samples_DistanceImage_Equal(const asn1SccBase_samples_DistanceImage* pVal1, const asn1SccBase_samples_DistanceImage* pVal2);

void asn1SccBase_samples_DistanceImage_data_Initialize(asn1SccBase_samples_DistanceImage_data* pVal);
void asn1SccBase_samples_DistanceImage_Initialize(asn1SccBase_samples_DistanceImage* pVal);

#define ERR_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3428  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3449  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3460  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3471  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3482  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3493  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3504  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3515  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA		3526  /**/
flag asn1SccBase_samples_DistanceImage_IsConstraintValid(const asn1SccBase_samples_DistanceImage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE		3533  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3445  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3456  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3467  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3478  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3489  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3500  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3511  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3527  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3522  /**/
#define asn1SccBase_samples_DistanceImage_REQUIRED_BYTES_FOR_ENCODING       2665 
#define asn1SccBase_samples_DistanceImage_REQUIRED_BITS_FOR_ENCODING        21320

flag asn1SccBase_samples_DistanceImage_Encode(const asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE		3534  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3446  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3457  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3468  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3479  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3490  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3501  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3512  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3528  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3523  /**/
flag asn1SccBase_samples_DistanceImage_Decode(asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt32 arr[200];
} asn1SccBase_samples_LaserScan_ranges;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_LaserScan_remission;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_Double start_angle;
    asn1SccT_Double angular_resolution;
    asn1SccT_Double speed;
    asn1SccBase_samples_LaserScan_ranges ranges;
    asn1SccT_UInt32 minrange;
    asn1SccT_UInt32 maxrange;
    asn1SccBase_samples_LaserScan_remission remission;
} asn1SccBase_samples_LaserScan;

flag asn1SccBase_samples_LaserScan_ranges_Equal(const asn1SccBase_samples_LaserScan_ranges* pVal1, const asn1SccBase_samples_LaserScan_ranges* pVal2);

flag asn1SccBase_samples_LaserScan_remission_Equal(const asn1SccBase_samples_LaserScan_remission* pVal1, const asn1SccBase_samples_LaserScan_remission* pVal2);

flag asn1SccBase_samples_LaserScan_Equal(const asn1SccBase_samples_LaserScan* pVal1, const asn1SccBase_samples_LaserScan* pVal2);

void asn1SccBase_samples_LaserScan_ranges_Initialize(asn1SccBase_samples_LaserScan_ranges* pVal);
void asn1SccBase_samples_LaserScan_remission_Initialize(asn1SccBase_samples_LaserScan_remission* pVal);
void asn1SccBase_samples_LaserScan_Initialize(asn1SccBase_samples_LaserScan* pVal);

#define ERR_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3660  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_START_ANGLE		3681  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3692  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_SPEED		3703  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3714  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES		3725  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MINRANGE		3732  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MAXRANGE		3743  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3754  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION		3765  /**/
flag asn1SccBase_samples_LaserScan_IsConstraintValid(const asn1SccBase_samples_LaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN		3772  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_TIME_2		3677  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3688  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3699  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3710  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES		3726  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3721  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3739  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3750  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION		3766  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3761  /**/
#define asn1SccBase_samples_LaserScan_REQUIRED_BYTES_FOR_ENCODING       3457 
#define asn1SccBase_samples_LaserScan_REQUIRED_BITS_FOR_ENCODING        27656

flag asn1SccBase_samples_LaserScan_Encode(const asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN		3773  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_TIME_2		3678  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3689  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3700  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3711  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES		3727  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3722  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3740  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3751  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION		3767  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3762  /**/
flag asn1SccBase_samples_LaserScan_Decode(asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_points;

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_points points;
    asn1SccBase_samples_Pointcloud_colors colors;
} asn1SccBase_samples_Pointcloud;

flag asn1SccBase_samples_Pointcloud_points_Equal(const asn1SccBase_samples_Pointcloud_points* pVal1, const asn1SccBase_samples_Pointcloud_points* pVal2);

flag asn1SccBase_samples_Pointcloud_colors_Equal(const asn1SccBase_samples_Pointcloud_colors* pVal1, const asn1SccBase_samples_Pointcloud_colors* pVal2);

flag asn1SccBase_samples_Pointcloud_Equal(const asn1SccBase_samples_Pointcloud* pVal1, const asn1SccBase_samples_Pointcloud* pVal2);

void asn1SccBase_samples_Pointcloud_points_Initialize(asn1SccBase_samples_Pointcloud_points* pVal);
void asn1SccBase_samples_Pointcloud_colors_Initialize(asn1SccBase_samples_Pointcloud_colors* pVal);
void asn1SccBase_samples_Pointcloud_Initialize(asn1SccBase_samples_Pointcloud* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3778  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3799  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3810  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS		3827  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3834  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3845  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS		3862  /**/
flag asn1SccBase_samples_Pointcloud_IsConstraintValid(const asn1SccBase_samples_Pointcloud* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD		3869  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3795  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS		3828  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3823  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS		3863  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3858  /**/
#define asn1SccBase_samples_Pointcloud_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_Encode(const asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD		3870  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3796  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS		3829  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3824  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS		3864  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3859  /**/
flag asn1SccBase_samples_Pointcloud_Decode(asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_Sonar_timestamps;

typedef struct {    int nCount; 
    
    asn1SccBase_Angle arr[200];
} asn1SccBase_samples_Sonar_bearings;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_Sonar_bins;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Sonar_timestamps timestamps;
    asn1SccBase_Time bin_duration;
    asn1SccBase_Angle beam_width;
    asn1SccBase_Angle beam_height;
    asn1SccBase_samples_Sonar_bearings bearings;
    asn1SccT_Float speed_of_sound;
    asn1SccT_UInt32 bin_count;
    asn1SccT_UInt32 beam_count;
    asn1SccBase_samples_Sonar_bins bins;
} asn1SccBase_samples_Sonar;

flag asn1SccBase_samples_Sonar_timestamps_Equal(const asn1SccBase_samples_Sonar_timestamps* pVal1, const asn1SccBase_samples_Sonar_timestamps* pVal2);

flag asn1SccBase_samples_Sonar_bearings_Equal(const asn1SccBase_samples_Sonar_bearings* pVal1, const asn1SccBase_samples_Sonar_bearings* pVal2);

flag asn1SccBase_samples_Sonar_bins_Equal(const asn1SccBase_samples_Sonar_bins* pVal1, const asn1SccBase_samples_Sonar_bins* pVal2);

flag asn1SccBase_samples_Sonar_Equal(const asn1SccBase_samples_Sonar* pVal1, const asn1SccBase_samples_Sonar* pVal2);

void asn1SccBase_samples_Sonar_timestamps_Initialize(asn1SccBase_samples_Sonar_timestamps* pVal);
void asn1SccBase_samples_Sonar_bearings_Initialize(asn1SccBase_samples_Sonar_bearings* pVal);
void asn1SccBase_samples_Sonar_bins_Initialize(asn1SccBase_samples_Sonar_bins* pVal);
void asn1SccBase_samples_Sonar_Initialize(asn1SccBase_samples_Sonar* pVal);

#define ERR_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4159  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4180  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS		4201  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4208  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4229  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4250  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4271  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS		4292  /**/
#define ERR_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4299  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_COUNT		4310  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_COUNT		4321  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS_ELM		4332  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS		4343  /**/
flag asn1SccBase_samples_Sonar_IsConstraintValid(const asn1SccBase_samples_Sonar* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR		4350  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIME_2		4176  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4202  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4197  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4225  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4246  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4267  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS		4293  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4288  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4306  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4317  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4328  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS		4344  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4339  /**/
#define asn1SccBase_samples_Sonar_REQUIRED_BYTES_FOR_ENCODING       6866 
#define asn1SccBase_samples_Sonar_REQUIRED_BITS_FOR_ENCODING        54928

flag asn1SccBase_samples_Sonar_Encode(const asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR		4351  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIME_2		4177  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4203  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4198  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4226  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4247  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4268  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS		4294  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4289  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4307  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4318  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4329  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS		4345  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4340  /**/
flag asn1SccBase_samples_Sonar_Decode(asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_SonarBeam_beam;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Angle bearing;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccT_Float beamwidth_horizontal;
    asn1SccT_Float beamwidth_vertical;
    asn1SccBase_samples_SonarBeam_beam beam;
} asn1SccBase_samples_SonarBeam;

flag asn1SccBase_samples_SonarBeam_beam_Equal(const asn1SccBase_samples_SonarBeam_beam* pVal1, const asn1SccBase_samples_SonarBeam_beam* pVal2);

flag asn1SccBase_samples_SonarBeam_Equal(const asn1SccBase_samples_SonarBeam* pVal1, const asn1SccBase_samples_SonarBeam* pVal2);

void asn1SccBase_samples_SonarBeam_beam_Initialize(asn1SccBase_samples_SonarBeam_beam* pVal);
void asn1SccBase_samples_SonarBeam_Initialize(asn1SccBase_samples_SonarBeam* pVal);

#define ERR_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4356  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4377  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4398  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4409  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4420  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4431  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM_ELM		4442  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM		4453  /**/
flag asn1SccBase_samples_SonarBeam_IsConstraintValid(const asn1SccBase_samples_SonarBeam* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM		4460  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_TIME_2		4373  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4394  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4405  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4416  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4427  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4438  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM		4454  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM_ELM_2		4449  /**/
#define asn1SccBase_samples_SonarBeam_REQUIRED_BYTES_FOR_ENCODING       274 
#define asn1SccBase_samples_SonarBeam_REQUIRED_BITS_FOR_ENCODING        2192

flag asn1SccBase_samples_SonarBeam_Encode(const asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM		4461  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_TIME_2		4374  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4395  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4406  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4417  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4428  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4439  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM		4455  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM_ELM_2		4450  /**/
flag asn1SccBase_samples_SonarBeam_Decode(asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_SonarScan_data;

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_SonarScan_time_beams;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_SonarScan_data data;
    asn1SccBase_samples_SonarScan_time_beams time_beams;
    asn1SccT_UInt16 number_of_beams;
    asn1SccT_UInt16 number_of_bins;
    asn1SccBase_Angle start_bearing;
    asn1SccBase_Angle angular_resolution;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccBase_Angle beamwidth_horizontal;
    asn1SccBase_Angle beamwidth_vertical;
    asn1SccT_Boolean memory_layout_column;
    asn1SccT_Boolean polar_coordinates;
} asn1SccBase_samples_SonarScan;

flag asn1SccBase_samples_SonarScan_data_Equal(const asn1SccBase_samples_SonarScan_data* pVal1, const asn1SccBase_samples_SonarScan_data* pVal2);

flag asn1SccBase_samples_SonarScan_time_beams_Equal(const asn1SccBase_samples_SonarScan_time_beams* pVal1, const asn1SccBase_samples_SonarScan_time_beams* pVal2);

flag asn1SccBase_samples_SonarScan_Equal(const asn1SccBase_samples_SonarScan* pVal1, const asn1SccBase_samples_SonarScan* pVal2);

void asn1SccBase_samples_SonarScan_data_Initialize(asn1SccBase_samples_SonarScan_data* pVal);
void asn1SccBase_samples_SonarScan_time_beams_Initialize(asn1SccBase_samples_SonarScan_time_beams* pVal);
void asn1SccBase_samples_SonarScan_Initialize(asn1SccBase_samples_SonarScan* pVal);

#define ERR_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4466  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA_ELM		4487  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA		4498  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4505  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4526  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4533  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4544  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4555  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4576  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4597  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4608  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4619  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4640  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4661  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4672  /**/
flag asn1SccBase_samples_SonarScan_IsConstraintValid(const asn1SccBase_samples_SonarScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN		4683  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_2		4483  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA		4499  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA_ELM_2		4494  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4527  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4522  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4540  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4551  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4572  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4593  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4604  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4615  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4636  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4657  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4668  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4679  /**/
#define asn1SccBase_samples_SonarScan_REQUIRED_BYTES_FOR_ENCODING       1893 
#define asn1SccBase_samples_SonarScan_REQUIRED_BITS_FOR_ENCODING        15138

flag asn1SccBase_samples_SonarScan_Encode(const asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN		4684  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_2		4484  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA		4500  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA_ELM_2		4495  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4528  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4523  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4541  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4552  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4573  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4594  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4605  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4616  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4637  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4658  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4669  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4680  /**/
flag asn1SccBase_samples_SonarScan_Decode(asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;
} asn1SccBase_commands_LinearAngular6DCommand_m;

flag asn1SccBase_commands_LinearAngular6DCommand_m_Equal(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal1, const asn1SccBase_commands_LinearAngular6DCommand_m* pVal2);

void asn1SccBase_commands_LinearAngular6DCommand_m_Initialize(asn1SccBase_commands_LinearAngular6DCommand_m* pVal);

#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6465  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6486  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6497  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6514  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6525  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_IsConstraintValid(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6542  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6482  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6510  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6538  /**/
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_commands_LinearAngular6DCommand_m_Encode(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6543  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6483  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6511  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6539  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_Decode(asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance_m pose;
    asn1SccBase_TwistWithCovariance_m velocity;
} asn1SccBase_samples_BodyState_m;

flag asn1SccBase_samples_BodyState_m_Equal(const asn1SccBase_samples_BodyState_m* pVal1, const asn1SccBase_samples_BodyState_m* pVal2);

void asn1SccBase_samples_BodyState_m_Initialize(asn1SccBase_samples_BodyState_m* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6548  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6569  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6580  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6597  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6608  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6615  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6636  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6647  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6674  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6685  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6702  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6713  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6730  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6741  /**/
flag asn1SccBase_samples_BodyState_m_IsConstraintValid(const asn1SccBase_samples_BodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M		6768  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6565  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6670  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6764  /**/
#define asn1SccBase_samples_BodyState_m_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_m_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_m_Encode(const asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M		6769  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6566  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6671  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6765  /**/
flag asn1SccBase_samples_BodyState_m_Decode(asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;
} asn1SccBase_samples_IMUSensors_m;

flag asn1SccBase_samples_IMUSensors_m_Equal(const asn1SccBase_samples_IMUSensors_m* pVal1, const asn1SccBase_samples_IMUSensors_m* pVal2);

void asn1SccBase_samples_IMUSensors_m_Initialize(asn1SccBase_samples_IMUSensors_m* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6774  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6795  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6806  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6823  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6834  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6851  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6862  /**/
flag asn1SccBase_samples_IMUSensors_m_IsConstraintValid(const asn1SccBase_samples_IMUSensors_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M		6879  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6791  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6819  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6847  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6875  /**/
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_m_Encode(const asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M		6880  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6792  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6820  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6848  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6876  /**/
flag asn1SccBase_samples_IMUSensors_m_Decode(asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;
} asn1SccBase_samples_RigidBodyAcceleration_m;

flag asn1SccBase_samples_RigidBodyAcceleration_m_Equal(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal1, const asn1SccBase_samples_RigidBodyAcceleration_m* pVal2);

void asn1SccBase_samples_RigidBodyAcceleration_m_Initialize(asn1SccBase_samples_RigidBodyAcceleration_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6885  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6906  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		6917  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		6934  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		6945  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		6962  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		6973  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		6990  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		7001  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		7018  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6902  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6930  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6958  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6986  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		7014  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_m_Encode(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		7019  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6903  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6931  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6959  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6987  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		7015  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_Decode(asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrench_m;

flag asn1SccBase_samples_Wrench_m_Equal(const asn1SccBase_samples_Wrench_m* pVal1, const asn1SccBase_samples_Wrench_m* pVal2);

void asn1SccBase_samples_Wrench_m_Initialize(asn1SccBase_samples_Wrench_m* pVal);

#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7308  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7319  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7336  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7347  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7364  /**/
flag asn1SccBase_samples_Wrench_m_IsConstraintValid(const asn1SccBase_samples_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M		7385  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7332  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7360  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TIME_2		7381  /**/
#define asn1SccBase_samples_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_m_Encode(const asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M		7386  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7333  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7361  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TIME_2		7382  /**/
flag asn1SccBase_samples_Wrench_m_Decode(asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_m_points;

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_m_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_m_points points;
    asn1SccBase_samples_Pointcloud_m_colors colors;
} asn1SccBase_samples_Pointcloud_m;

flag asn1SccBase_samples_Pointcloud_m_points_Equal(const asn1SccBase_samples_Pointcloud_m_points* pVal1, const asn1SccBase_samples_Pointcloud_m_points* pVal2);

flag asn1SccBase_samples_Pointcloud_m_colors_Equal(const asn1SccBase_samples_Pointcloud_m_colors* pVal1, const asn1SccBase_samples_Pointcloud_m_colors* pVal2);

flag asn1SccBase_samples_Pointcloud_m_Equal(const asn1SccBase_samples_Pointcloud_m* pVal1, const asn1SccBase_samples_Pointcloud_m* pVal2);

void asn1SccBase_samples_Pointcloud_m_points_Initialize(asn1SccBase_samples_Pointcloud_m_points* pVal);
void asn1SccBase_samples_Pointcloud_m_colors_Initialize(asn1SccBase_samples_Pointcloud_m_colors* pVal);
void asn1SccBase_samples_Pointcloud_m_Initialize(asn1SccBase_samples_Pointcloud_m* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7682  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7703  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7714  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS		7731  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7738  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7749  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS		7766  /**/
flag asn1SccBase_samples_Pointcloud_m_IsConstraintValid(const asn1SccBase_samples_Pointcloud_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M		7773  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7699  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7732  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7727  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7767  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7762  /**/
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_m_Encode(const asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M		7774  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7700  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7733  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7728  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7768  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7763  /**/
flag asn1SccBase_samples_Pointcloud_m_Decode(asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[200];
} asn1SccT_String;

flag asn1SccT_String_Equal(const asn1SccT_String* pVal1, const asn1SccT_String* pVal2);

void asn1SccT_String_Initialize(asn1SccT_String* pVal);

#define ERR_T_STRING		78  /**/
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		79  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       201 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        1608

flag asn1SccT_String_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		80  /**/
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointLimits_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_JointLimits_elements;

typedef struct {
    asn1SccBase_JointLimits_names names;
    asn1SccBase_JointLimits_elements elements;
} asn1SccBase_JointLimits;

flag asn1SccBase_JointLimits_names_Equal(const asn1SccBase_JointLimits_names* pVal1, const asn1SccBase_JointLimits_names* pVal2);

flag asn1SccBase_JointLimits_elements_Equal(const asn1SccBase_JointLimits_elements* pVal1, const asn1SccBase_JointLimits_elements* pVal2);

flag asn1SccBase_JointLimits_Equal(const asn1SccBase_JointLimits* pVal1, const asn1SccBase_JointLimits* pVal2);

void asn1SccBase_JointLimits_names_Initialize(asn1SccBase_JointLimits_names* pVal);
void asn1SccBase_JointLimits_elements_Initialize(asn1SccBase_JointLimits_elements* pVal);
void asn1SccBase_JointLimits_Initialize(asn1SccBase_JointLimits* pVal);

#define ERR_BASE_JOINTLIMITS_NAMES_ELM		2420  /**/
#define ERR_BASE_JOINTLIMITS_NAMES		2431  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2438  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2449  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2460  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2471  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2482  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2503  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2514  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2525  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2536  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2547  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS		2578  /**/
flag asn1SccBase_JointLimits_IsConstraintValid(const asn1SccBase_JointLimits* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITS		2585  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES		2432  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES_ELM_2		2427  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS		2579  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2574  /**/
#define asn1SccBase_JointLimits_REQUIRED_BYTES_FOR_ENCODING       66202 
#define asn1SccBase_JointLimits_REQUIRED_BITS_FOR_ENCODING        529616

flag asn1SccBase_JointLimits_Encode(const asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITS		2586  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES		2433  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES_ELM_2		2428  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS		2580  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2575  /**/
flag asn1SccBase_JointLimits_Decode(asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;
} asn1SccBase_JointTransform;

flag asn1SccBase_JointTransform_Equal(const asn1SccBase_JointTransform* pVal1, const asn1SccBase_JointTransform* pVal2);

void asn1SccBase_JointTransform_Initialize(asn1SccBase_JointTransform* pVal);

#define ERR_BASE_JOINTTRANSFORM_SOURCEFRAME		2591  /**/
#define ERR_BASE_JOINTTRANSFORM_TARGETFRAME		2602  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2613  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2624  /**/
flag asn1SccBase_JointTransform_IsConstraintValid(const asn1SccBase_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM		2641  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2598  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2609  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2637  /**/
#define asn1SccBase_JointTransform_REQUIRED_BYTES_FOR_ENCODING       442 
#define asn1SccBase_JointTransform_REQUIRED_BITS_FOR_ENCODING        3530

flag asn1SccBase_JointTransform_Encode(const asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM		2642  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2599  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2610  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2638  /**/
flag asn1SccBase_JointTransform_Decode(asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_JointTransformVector_elements;

typedef struct {
    asn1SccBase_JointTransformVector_names names;
    asn1SccBase_JointTransformVector_elements elements;
} asn1SccBase_JointTransformVector;

flag asn1SccBase_JointTransformVector_names_Equal(const asn1SccBase_JointTransformVector_names* pVal1, const asn1SccBase_JointTransformVector_names* pVal2);

flag asn1SccBase_JointTransformVector_elements_Equal(const asn1SccBase_JointTransformVector_elements* pVal1, const asn1SccBase_JointTransformVector_elements* pVal2);

flag asn1SccBase_JointTransformVector_Equal(const asn1SccBase_JointTransformVector* pVal1, const asn1SccBase_JointTransformVector* pVal2);

void asn1SccBase_JointTransformVector_names_Initialize(asn1SccBase_JointTransformVector_names* pVal);
void asn1SccBase_JointTransformVector_elements_Initialize(asn1SccBase_JointTransformVector_elements* pVal);
void asn1SccBase_JointTransformVector_Initialize(asn1SccBase_JointTransformVector* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4835  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES		4846  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4853  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4864  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4875  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4886  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4913  /**/
flag asn1SccBase_JointTransformVector_IsConstraintValid(const asn1SccBase_JointTransformVector* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR		4920  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4847  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4842  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4914  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4909  /**/
#define asn1SccBase_JointTransformVector_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_JointTransformVector_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_JointTransformVector_Encode(const asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR		4921  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4848  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4843  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4915  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4910  /**/
flag asn1SccBase_JointTransformVector_Decode(asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTransform_names names;
    asn1SccBase_NamedVector_Base_JointTransform_elements elements;
} asn1SccBase_NamedVector_Base_JointTransform;

flag asn1SccBase_NamedVector_Base_JointTransform_names_Equal(const asn1SccBase_NamedVector_Base_JointTransform_names* pVal1, const asn1SccBase_NamedVector_Base_JointTransform_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointTransform_elements_Equal(const asn1SccBase_NamedVector_Base_JointTransform_elements* pVal1, const asn1SccBase_NamedVector_Base_JointTransform_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointTransform_Equal(const asn1SccBase_NamedVector_Base_JointTransform* pVal1, const asn1SccBase_NamedVector_Base_JointTransform* pVal2);

void asn1SccBase_NamedVector_Base_JointTransform_names_Initialize(asn1SccBase_NamedVector_Base_JointTransform_names* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_elements_Initialize(asn1SccBase_NamedVector_Base_JointTransform_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_Initialize(asn1SccBase_NamedVector_Base_JointTransform* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4926  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4937  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4944  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		4955  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4966  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		4977  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5004  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		5011  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4938  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4933  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5005  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		5000  /**/
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_NamedVector_Base_JointTransform_Encode(const asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		5012  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4939  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4934  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5006  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		5001  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_Decode(asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointsTrajectory_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_JointsTrajectory_elements;

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_JointsTrajectory_times_val;

typedef struct {
    asn1SccBase_JointsTrajectory_names names;
    asn1SccBase_JointsTrajectory_elements elements;
    asn1SccBase_JointsTrajectory_times_val times_val;
} asn1SccBase_JointsTrajectory;

flag asn1SccBase_JointsTrajectory_names_Equal(const asn1SccBase_JointsTrajectory_names* pVal1, const asn1SccBase_JointsTrajectory_names* pVal2);

flag asn1SccBase_JointsTrajectory_elements_Equal(const asn1SccBase_JointsTrajectory_elements* pVal1, const asn1SccBase_JointsTrajectory_elements* pVal2);

flag asn1SccBase_JointsTrajectory_times_val_Equal(const asn1SccBase_JointsTrajectory_times_val* pVal1, const asn1SccBase_JointsTrajectory_times_val* pVal2);

flag asn1SccBase_JointsTrajectory_Equal(const asn1SccBase_JointsTrajectory* pVal1, const asn1SccBase_JointsTrajectory* pVal2);

void asn1SccBase_JointsTrajectory_names_Initialize(asn1SccBase_JointsTrajectory_names* pVal);
void asn1SccBase_JointsTrajectory_elements_Initialize(asn1SccBase_JointsTrajectory_elements* pVal);
void asn1SccBase_JointsTrajectory_times_val_Initialize(asn1SccBase_JointsTrajectory_times_val* pVal);
void asn1SccBase_JointsTrajectory_Initialize(asn1SccBase_JointsTrajectory* pVal);

#define ERR_BASE_JOINTSTRAJECTORY_NAMES_ELM		2647  /**/
#define ERR_BASE_JOINTSTRAJECTORY_NAMES		2658  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2665  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2676  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2687  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2698  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2709  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2730  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS		2741  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2748  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL		2769  /**/
flag asn1SccBase_JointsTrajectory_IsConstraintValid(const asn1SccBase_JointsTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY		2776  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES		2659  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2654  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2742  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2737  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2770  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2765  /**/
#define asn1SccBase_JointsTrajectory_REQUIRED_BYTES_FOR_ENCODING       2642003 
#define asn1SccBase_JointsTrajectory_REQUIRED_BITS_FOR_ENCODING        21136024

flag asn1SccBase_JointsTrajectory_Encode(const asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY		2777  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES		2660  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2655  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2743  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2738  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2771  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2766  /**/
flag asn1SccBase_JointsTrajectory_Decode(asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointLimitRange_names names;
    asn1SccBase_NamedVector_Base_JointLimitRange_elements elements;
} asn1SccBase_NamedVector_Base_JointLimitRange;

flag asn1SccBase_NamedVector_Base_JointLimitRange_names_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointLimitRange_elements_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointLimitRange_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange* pVal2);

void asn1SccBase_NamedVector_Base_JointLimitRange_names_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_elements_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2782  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2793  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2800  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2811  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2822  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2833  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2844  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2865  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2876  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2887  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2898  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2909  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2940  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2947  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2794  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2789  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2941  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2936  /**/
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       66202 
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        529616

flag asn1SccBase_NamedVector_Base_JointLimitRange_Encode(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2948  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2795  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2790  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2942  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2937  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_Decode(asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointState_names;

typedef struct {
    asn1SccBase_NamedVector_Base_JointState_names names;
    asn1SccBase_JointTrajectory elements;
} asn1SccBase_NamedVector_Base_JointState;

flag asn1SccBase_NamedVector_Base_JointState_names_Equal(const asn1SccBase_NamedVector_Base_JointState_names* pVal1, const asn1SccBase_NamedVector_Base_JointState_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointState_Equal(const asn1SccBase_NamedVector_Base_JointState* pVal1, const asn1SccBase_NamedVector_Base_JointState* pVal2);

void asn1SccBase_NamedVector_Base_JointState_names_Initialize(asn1SccBase_NamedVector_Base_JointState_names* pVal);
void asn1SccBase_NamedVector_Base_JointState_Initialize(asn1SccBase_NamedVector_Base_JointState* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2953  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2964  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2971  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2982  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		2993  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		3004  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		3015  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		3036  /**/
flag asn1SccBase_NamedVector_Base_JointState_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		3047  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2965  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2960  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		3043  /**/
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BYTES_FOR_ENCODING       53202 
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BITS_FOR_ENCODING        425616

flag asn1SccBase_NamedVector_Base_JointState_Encode(const asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		3048  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2966  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2961  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		3044  /**/
flag asn1SccBase_NamedVector_Base_JointState_Decode(asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_Wrench_names;

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_NamedVector_Base_Wrench_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_Wrench_names names;
    asn1SccBase_NamedVector_Base_Wrench_elements elements;
} asn1SccBase_NamedVector_Base_Wrench;

flag asn1SccBase_NamedVector_Base_Wrench_names_Equal(const asn1SccBase_NamedVector_Base_Wrench_names* pVal1, const asn1SccBase_NamedVector_Base_Wrench_names* pVal2);

flag asn1SccBase_NamedVector_Base_Wrench_elements_Equal(const asn1SccBase_NamedVector_Base_Wrench_elements* pVal1, const asn1SccBase_NamedVector_Base_Wrench_elements* pVal2);

flag asn1SccBase_NamedVector_Base_Wrench_Equal(const asn1SccBase_NamedVector_Base_Wrench* pVal1, const asn1SccBase_NamedVector_Base_Wrench* pVal2);

void asn1SccBase_NamedVector_Base_Wrench_names_Initialize(asn1SccBase_NamedVector_Base_Wrench_names* pVal);
void asn1SccBase_NamedVector_Base_Wrench_elements_Initialize(asn1SccBase_NamedVector_Base_Wrench_elements* pVal);
void asn1SccBase_NamedVector_Base_Wrench_Initialize(asn1SccBase_NamedVector_Base_Wrench* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		3053  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3064  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		3071  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		3082  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3099  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3110  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3137  /**/
flag asn1SccBase_NamedVector_Base_Wrench_IsConstraintValid(const asn1SccBase_NamedVector_Base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH		3144  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3065  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		3060  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3138  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3133  /**/
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BYTES_FOR_ENCODING       55902 
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BITS_FOR_ENCODING        447216

flag asn1SccBase_NamedVector_Base_Wrench_Encode(const asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH		3145  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3066  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		3061  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3139  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3134  /**/
flag asn1SccBase_NamedVector_Base_Wrench_Decode(asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTrajectory_names names;
    asn1SccBase_NamedVector_Base_JointTrajectory_elements elements;
} asn1SccBase_NamedVector_Base_JointTrajectory;

flag asn1SccBase_NamedVector_Base_JointTrajectory_names_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointTrajectory_elements_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointTrajectory_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory* pVal2);

void asn1SccBase_NamedVector_Base_JointTrajectory_names_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_elements_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3150  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3161  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3168  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3179  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3190  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3201  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3212  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3233  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3244  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3251  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3162  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3157  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3245  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3240  /**/
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       2640402 
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        21123216

flag asn1SccBase_NamedVector_Base_JointTrajectory_Encode(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3252  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3163  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3158  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3246  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3241  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_Decode(asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_commands_Joints_names;

typedef struct {
    asn1SccBase_commands_Joints_names names;
    asn1SccBase_JointTrajectory elements;
    asn1SccBase_Time time;
} asn1SccBase_commands_Joints;

flag asn1SccBase_commands_Joints_names_Equal(const asn1SccBase_commands_Joints_names* pVal1, const asn1SccBase_commands_Joints_names* pVal2);

flag asn1SccBase_commands_Joints_Equal(const asn1SccBase_commands_Joints* pVal1, const asn1SccBase_commands_Joints* pVal2);

void asn1SccBase_commands_Joints_names_Initialize(asn1SccBase_commands_Joints_names* pVal);
void asn1SccBase_commands_Joints_Initialize(asn1SccBase_commands_Joints* pVal);

#define ERR_BASE_COMMANDS_JOINTS_NAMES_ELM		3539  /**/
#define ERR_BASE_COMMANDS_JOINTS_NAMES		3550  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3557  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3568  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3579  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3590  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3601  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS		3622  /**/
#define ERR_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3633  /**/
flag asn1SccBase_commands_Joints_IsConstraintValid(const asn1SccBase_commands_Joints* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS		3654  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES		3551  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3546  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3629  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_TIME_2		3650  /**/
#define asn1SccBase_commands_Joints_REQUIRED_BYTES_FOR_ENCODING       53210 
#define asn1SccBase_commands_Joints_REQUIRED_BITS_FOR_ENCODING        425680

flag asn1SccBase_commands_Joints_Encode(const asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS		3655  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES		3552  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3547  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3630  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_TIME_2		3651  /**/
flag asn1SccBase_commands_Joints_Decode(asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;
} asn1SccBase_samples_RigidBodyState;

flag asn1SccBase_samples_RigidBodyState_Equal(const asn1SccBase_samples_RigidBodyState* pVal1, const asn1SccBase_samples_RigidBodyState* pVal2);

void asn1SccBase_samples_RigidBodyState_Initialize(asn1SccBase_samples_RigidBodyState* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3875  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3896  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3907  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3918  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3929  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3946  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3957  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		3974  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		3985  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		3992  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		4013  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		4024  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		4041  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		4052  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		4069  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		4080  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4097  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4108  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4125  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4136  /**/
flag asn1SccBase_samples_RigidBodyState_IsConstraintValid(const asn1SccBase_samples_RigidBodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE		4153  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3892  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3903  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3914  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3942  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3970  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		4009  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		4037  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		4065  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4093  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4121  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4149  /**/
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BYTES_FOR_ENCODING       1050 
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BITS_FOR_ENCODING        8400

flag asn1SccBase_samples_RigidBodyState_Encode(const asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE		4154  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3893  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3904  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3915  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3943  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3971  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		4010  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		4038  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		4066  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4094  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4122  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4150  /**/
flag asn1SccBase_samples_RigidBodyState_Decode(asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_names;

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_samples_Wrenches_elements;

typedef struct {
    asn1SccBase_samples_Wrenches_names names;
    asn1SccBase_samples_Wrenches_elements elements;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrenches;

flag asn1SccBase_samples_Wrenches_names_Equal(const asn1SccBase_samples_Wrenches_names* pVal1, const asn1SccBase_samples_Wrenches_names* pVal2);

flag asn1SccBase_samples_Wrenches_elements_Equal(const asn1SccBase_samples_Wrenches_elements* pVal1, const asn1SccBase_samples_Wrenches_elements* pVal2);

flag asn1SccBase_samples_Wrenches_Equal(const asn1SccBase_samples_Wrenches* pVal1, const asn1SccBase_samples_Wrenches* pVal2);

void asn1SccBase_samples_Wrenches_names_Initialize(asn1SccBase_samples_Wrenches_names* pVal);
void asn1SccBase_samples_Wrenches_elements_Initialize(asn1SccBase_samples_Wrenches_elements* pVal);
void asn1SccBase_samples_Wrenches_Initialize(asn1SccBase_samples_Wrenches* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_NAMES_ELM		4689  /**/
#define ERR_BASE_SAMPLES_WRENCHES_NAMES		4700  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4707  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4718  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4735  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4746  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS		4773  /**/
#define ERR_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4780  /**/
flag asn1SccBase_samples_Wrenches_IsConstraintValid(const asn1SccBase_samples_Wrenches* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES		4801  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES		4701  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4696  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4774  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4769  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_TIME_2		4797  /**/
#define asn1SccBase_samples_Wrenches_REQUIRED_BYTES_FOR_ENCODING       55910 
#define asn1SccBase_samples_Wrenches_REQUIRED_BITS_FOR_ENCODING        447280

flag asn1SccBase_samples_Wrenches_Encode(const asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES		4802  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES		4702  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4697  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4775  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4770  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_TIME_2		4798  /**/
flag asn1SccBase_samples_Wrenches_Decode(asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String data;
    asn1SccT_String name_val;
} asn1SccBase_samples_frame_frame_attrib_t;

flag asn1SccBase_samples_frame_frame_attrib_t_Equal(const asn1SccBase_samples_frame_frame_attrib_t* pVal1, const asn1SccBase_samples_frame_frame_attrib_t* pVal2);

void asn1SccBase_samples_frame_frame_attrib_t_Initialize(asn1SccBase_samples_frame_frame_attrib_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4807  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4818  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_attrib_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4829  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4814  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4825  /**/
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BYTES_FOR_ENCODING       402 
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BITS_FOR_ENCODING        3216

flag asn1SccBase_samples_frame_frame_attrib_t_Encode(const asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4830  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4815  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4826  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_Decode(asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;
} asn1SccBase_JointTransform_m;

flag asn1SccBase_JointTransform_m_Equal(const asn1SccBase_JointTransform_m* pVal1, const asn1SccBase_JointTransform_m* pVal2);

void asn1SccBase_JointTransform_m_Initialize(asn1SccBase_JointTransform_m* pVal);

#define ERR_BASE_JOINTTRANSFORM_M_SOURCEFRAME		5971  /**/
#define ERR_BASE_JOINTTRANSFORM_M_TARGETFRAME		5982  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		5993  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		6004  /**/
flag asn1SccBase_JointTransform_m_IsConstraintValid(const asn1SccBase_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M		6021  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5978  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5989  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		6017  /**/
#define asn1SccBase_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       442 
#define asn1SccBase_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        3530

flag asn1SccBase_JointTransform_m_Encode(const asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M		6022  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5979  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5990  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		6018  /**/
flag asn1SccBase_JointTransform_m_Decode(asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		242  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		253  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		264  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		275  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		302  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		303  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		298  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       88251 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BITS_FOR_ENCODING        706008

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		304  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		299  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_m_names;

typedef struct {
    asn1SccBase_JointTransformVector_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;
} asn1SccBase_JointTransformVector_m;

flag asn1SccBase_JointTransformVector_m_names_Equal(const asn1SccBase_JointTransformVector_m_names* pVal1, const asn1SccBase_JointTransformVector_m_names* pVal2);

flag asn1SccBase_JointTransformVector_m_Equal(const asn1SccBase_JointTransformVector_m* pVal1, const asn1SccBase_JointTransformVector_m* pVal2);

void asn1SccBase_JointTransformVector_m_names_Initialize(asn1SccBase_JointTransformVector_m_names* pVal);
void asn1SccBase_JointTransformVector_m_Initialize(asn1SccBase_JointTransformVector_m* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7391  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7402  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7409  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7420  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7431  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7442  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7469  /**/
flag asn1SccBase_JointTransformVector_m_IsConstraintValid(const asn1SccBase_JointTransformVector_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M		7480  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7403  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7398  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7476  /**/
#define asn1SccBase_JointTransformVector_m_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_JointTransformVector_m_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_JointTransformVector_m_Encode(const asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M		7481  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7404  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7399  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7477  /**/
flag asn1SccBase_JointTransformVector_m_Decode(asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_JointTransform_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_JointTransform_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;
} asn1SccBase_NamedVector_base_JointTransform_m;

flag asn1SccBase_NamedVector_base_JointTransform_m_names_Equal(const asn1SccBase_NamedVector_base_JointTransform_m_names* pVal1, const asn1SccBase_NamedVector_base_JointTransform_m_names* pVal2);

flag asn1SccBase_NamedVector_base_JointTransform_m_Equal(const asn1SccBase_NamedVector_base_JointTransform_m* pVal1, const asn1SccBase_NamedVector_base_JointTransform_m* pVal2);

void asn1SccBase_NamedVector_base_JointTransform_m_names_Initialize(asn1SccBase_NamedVector_base_JointTransform_m_names* pVal);
void asn1SccBase_NamedVector_base_JointTransform_m_Initialize(asn1SccBase_NamedVector_base_JointTransform_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7486  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7497  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7504  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7515  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7526  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7537  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7564  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_IsConstraintValid(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7575  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7498  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7493  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7571  /**/
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_NamedVector_base_JointTransform_m_Encode(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7576  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7499  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7494  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7572  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_Decode(asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;
} asn1SccBase_samples_RigidBodyState_m;

flag asn1SccBase_samples_RigidBodyState_m_Equal(const asn1SccBase_samples_RigidBodyState_m* pVal1, const asn1SccBase_samples_RigidBodyState_m* pVal2);

void asn1SccBase_samples_RigidBodyState_m_Initialize(asn1SccBase_samples_RigidBodyState_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		7024  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		7045  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		7056  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		7067  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		7078  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		7095  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		7106  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		7123  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		7134  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7141  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7162  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7173  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7190  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7201  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7218  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7229  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7246  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7257  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7274  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7285  /**/
flag asn1SccBase_samples_RigidBodyState_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7302  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		7041  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		7052  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		7063  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7091  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7119  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7158  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7186  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7214  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7242  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7270  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7298  /**/
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BYTES_FOR_ENCODING       1050 
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BITS_FOR_ENCODING        8400

flag asn1SccBase_samples_RigidBodyState_m_Encode(const asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7303  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		7042  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		7053  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		7064  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7092  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7120  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7159  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7187  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7215  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7243  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7271  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7299  /**/
flag asn1SccBase_samples_RigidBodyState_m_Decode(asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_Wrench_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_Wrench_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;
} asn1SccBase_NamedVector_base_Wrench_m;

flag asn1SccBase_NamedVector_base_Wrench_m_names_Equal(const asn1SccBase_NamedVector_base_Wrench_m_names* pVal1, const asn1SccBase_NamedVector_base_Wrench_m_names* pVal2);

flag asn1SccBase_NamedVector_base_Wrench_m_Equal(const asn1SccBase_NamedVector_base_Wrench_m* pVal1, const asn1SccBase_NamedVector_base_Wrench_m* pVal2);

void asn1SccBase_NamedVector_base_Wrench_m_names_Initialize(asn1SccBase_NamedVector_base_Wrench_m_names* pVal);
void asn1SccBase_NamedVector_base_Wrench_m_Initialize(asn1SccBase_NamedVector_base_Wrench_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7581  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7592  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7599  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7610  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7627  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7638  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7665  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_IsConstraintValid(const asn1SccBase_NamedVector_base_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7676  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7593  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7588  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7672  /**/
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       55902 
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BITS_FOR_ENCODING        447216

flag asn1SccBase_NamedVector_base_Wrench_m_Encode(const asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7677  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7594  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7589  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7673  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_Decode(asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_m_names;

typedef struct {
    asn1SccBase_samples_Wrenches_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrenches_m;

flag asn1SccBase_samples_Wrenches_m_names_Equal(const asn1SccBase_samples_Wrenches_m_names* pVal1, const asn1SccBase_samples_Wrenches_m_names* pVal2);

flag asn1SccBase_samples_Wrenches_m_Equal(const asn1SccBase_samples_Wrenches_m* pVal1, const asn1SccBase_samples_Wrenches_m* pVal2);

void asn1SccBase_samples_Wrenches_m_names_Initialize(asn1SccBase_samples_Wrenches_m_names* pVal);
void asn1SccBase_samples_Wrenches_m_Initialize(asn1SccBase_samples_Wrenches_m* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7779  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES		7790  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7797  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7808  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7825  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7836  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7863  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7874  /**/
flag asn1SccBase_samples_Wrenches_m_IsConstraintValid(const asn1SccBase_samples_Wrenches_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M		7895  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES		7791  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7786  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7870  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7891  /**/
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BYTES_FOR_ENCODING       55910 
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BITS_FOR_ENCODING        447280

flag asn1SccBase_samples_Wrenches_m_Encode(const asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M		7896  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES		7792  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7787  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7871  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7892  /**/
flag asn1SccBase_samples_Wrenches_m_Decode(asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccacceleration = 0,
    asn1Scceffort = 1,
    asn1Sccposition = 2,
    asn1Sccraw = 3,
    asn1Sccspeed = 4,
    asn1Sccunset = 5
} asn1SccBase_JointState_MODE;

flag asn1SccBase_JointState_MODE_Equal(const asn1SccBase_JointState_MODE* pVal1, const asn1SccBase_JointState_MODE* pVal2);

void asn1SccBase_JointState_MODE_Initialize(asn1SccBase_JointState_MODE* pVal);

#define ERR_BASE_JOINTSTATE_MODE		100  /**/
flag asn1SccBase_JointState_MODE_IsConstraintValid(const asn1SccBase_JointState_MODE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE_MODE		101  /**/
#define asn1SccBase_JointState_MODE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_JointState_MODE_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_JointState_MODE_Encode(const asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE_MODE		102  /**/
flag asn1SccBase_JointState_MODE_Decode(asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccmicroseconds = 0,
    asn1Sccmilliseconds = 1,
    asn1Sccseconds = 2
} asn1SccBase_Time_Resolution;

flag asn1SccBase_Time_Resolution_Equal(const asn1SccBase_Time_Resolution* pVal1, const asn1SccBase_Time_Resolution* pVal2);

void asn1SccBase_Time_Resolution_Initialize(asn1SccBase_Time_Resolution* pVal);

#define ERR_BASE_TIME_RESOLUTION		107  /**/
flag asn1SccBase_Time_Resolution_IsConstraintValid(const asn1SccBase_Time_Resolution* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME_RESOLUTION		108  /**/
#define asn1SccBase_Time_Resolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_Time_Resolution_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_Time_Resolution_Encode(const asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME_RESOLUTION		109  /**/
flag asn1SccBase_Time_Resolution_Decode(asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccderivative_to_next = 0,
    asn1Sccderivative_to_prior = 1,
    asn1Sccknuckle_point = 2,
    asn1Sccordinary_point = 3,
    asn1Sccsecond_derivative_to_next = 4,
    asn1Sccsecond_derivative_to_prior = 5,
    asn1Scctangent_point_for_next = 6,
    asn1Scctangent_point_for_prior = 7
} asn1SccBase_geometry_SplineBase_CoordinateType;

flag asn1SccBase_geometry_SplineBase_CoordinateType_Equal(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal1, const asn1SccBase_geometry_SplineBase_CoordinateType* pVal2);

void asn1SccBase_geometry_SplineBase_CoordinateType_Initialize(asn1SccBase_geometry_SplineBase_CoordinateType* pVal);

#define ERR_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		114  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_IsConstraintValid(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		115  /**/
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_geometry_SplineBase_CoordinateType_Encode(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		116  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_Decode(asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_measurement_error = 0,
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_too_far = 1,
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_too_near = 2,
    asn1Sccvalid_measurement = 3
} asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE;

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Equal(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal1, const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal2);

void asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Initialize(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		121  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_IsConstraintValid(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		122  /**/
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Encode(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		123  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Decode(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccplanar = 0,
    asn1Sccpolar = 1
} asn1SccBase_samples_DepthMap_PROJECTION_TYPE;

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Equal(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal1, const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal2);

void asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Initialize(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		128  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_IsConstraintValid(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		129  /**/
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Encode(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		130  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Decode(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_DepthMap_timestamps;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_vertical_interval;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_horizontal_interval;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_distances;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_remissions;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_DepthMap_timestamps timestamps;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE vertical_projection;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE horizontal_projection;
    asn1SccBase_samples_DepthMap_vertical_interval vertical_interval;
    asn1SccBase_samples_DepthMap_horizontal_interval horizontal_interval;
    asn1SccT_UInt32 vertical_size;
    asn1SccT_UInt32 horizontal_size;
    asn1SccBase_samples_DepthMap_distances distances;
    asn1SccBase_samples_DepthMap_remissions remissions;
} asn1SccBase_samples_DepthMap;

flag asn1SccBase_samples_DepthMap_timestamps_Equal(const asn1SccBase_samples_DepthMap_timestamps* pVal1, const asn1SccBase_samples_DepthMap_timestamps* pVal2);

flag asn1SccBase_samples_DepthMap_vertical_interval_Equal(const asn1SccBase_samples_DepthMap_vertical_interval* pVal1, const asn1SccBase_samples_DepthMap_vertical_interval* pVal2);

flag asn1SccBase_samples_DepthMap_horizontal_interval_Equal(const asn1SccBase_samples_DepthMap_horizontal_interval* pVal1, const asn1SccBase_samples_DepthMap_horizontal_interval* pVal2);

flag asn1SccBase_samples_DepthMap_distances_Equal(const asn1SccBase_samples_DepthMap_distances* pVal1, const asn1SccBase_samples_DepthMap_distances* pVal2);

flag asn1SccBase_samples_DepthMap_remissions_Equal(const asn1SccBase_samples_DepthMap_remissions* pVal1, const asn1SccBase_samples_DepthMap_remissions* pVal2);

flag asn1SccBase_samples_DepthMap_Equal(const asn1SccBase_samples_DepthMap* pVal1, const asn1SccBase_samples_DepthMap* pVal2);

void asn1SccBase_samples_DepthMap_timestamps_Initialize(asn1SccBase_samples_DepthMap_timestamps* pVal);
void asn1SccBase_samples_DepthMap_vertical_interval_Initialize(asn1SccBase_samples_DepthMap_vertical_interval* pVal);
void asn1SccBase_samples_DepthMap_horizontal_interval_Initialize(asn1SccBase_samples_DepthMap_horizontal_interval* pVal);
void asn1SccBase_samples_DepthMap_distances_Initialize(asn1SccBase_samples_DepthMap_distances* pVal);
void asn1SccBase_samples_DepthMap_remissions_Initialize(asn1SccBase_samples_DepthMap_remissions* pVal);
void asn1SccBase_samples_DepthMap_Initialize(asn1SccBase_samples_DepthMap* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3257  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3278  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3299  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3306  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3317  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3328  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3339  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3346  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3357  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3364  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3375  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3386  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES		3397  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3404  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3415  /**/
flag asn1SccBase_samples_DepthMap_IsConstraintValid(const asn1SccBase_samples_DepthMap* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP		3422  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3274  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3300  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3295  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3313  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3324  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3340  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3335  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3358  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3353  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3371  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3382  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3398  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3393  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3416  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3411  /**/
#define asn1SccBase_samples_DepthMap_REQUIRED_BYTES_FOR_ENCODING       12022 
#define asn1SccBase_samples_DepthMap_REQUIRED_BITS_FOR_ENCODING        96170

flag asn1SccBase_samples_DepthMap_Encode(const asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP		3423  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3275  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3301  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3296  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3314  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3325  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3341  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3336  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3359  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3354  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3372  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3383  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3399  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3394  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3417  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3412  /**/
flag asn1SccBase_samples_DepthMap_Decode(asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccunit_x = 0,
    asn1Sccunit_y = 1,
    asn1Sccunit_z = 2
} asn1SccBase_samples_DepthMap_UNIT_AXIS;

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Equal(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal1, const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal2);

void asn1SccBase_samples_DepthMap_UNIT_AXIS_Initialize(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		135  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_IsConstraintValid(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		136  /**/
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Encode(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		137  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Decode(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccend_laser_range_errors = 0,
    asn1Sccmax_range_error = 1,
    asn1SccBase_samples_LASER_RANGE_ERRORS_measurement_error = 2,
    asn1Sccother_range_errors = 3,
    asn1SccBase_samples_LASER_RANGE_ERRORS_too_far = 4,
    asn1SccBase_samples_LASER_RANGE_ERRORS_too_near = 5
} asn1SccBase_samples_LASER_RANGE_ERRORS;

flag asn1SccBase_samples_LASER_RANGE_ERRORS_Equal(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal1, const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal2);

void asn1SccBase_samples_LASER_RANGE_ERRORS_Initialize(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal);

#define ERR_BASE_SAMPLES_LASER_RANGE_ERRORS		142  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_IsConstraintValid(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASER_RANGE_ERRORS		143  /**/
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_samples_LASER_RANGE_ERRORS_Encode(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASER_RANGE_ERRORS		144  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_Decode(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Scccompressed_modes = 0,
    asn1Sccmode_bayer = 1,
    asn1Sccmode_bayer_bggr = 2,
    asn1Sccmode_bayer_gbrg = 3,
    asn1Sccmode_bayer_grbg = 4,
    asn1Sccmode_bayer_rggb = 5,
    asn1Sccmode_bgr = 6,
    asn1Sccmode_grayscale = 7,
    asn1Sccmode_jpeg = 8,
    asn1Sccmode_pjpg = 9,
    asn1Sccmode_png = 10,
    asn1Sccmode_rgb = 11,
    asn1Sccmode_rgb32 = 12,
    asn1Sccmode_undefined = 13,
    asn1Sccmode_uyvy = 14,
    asn1Sccraw_modes = 15
} asn1SccBase_samples_frame_frame_mode_t;

flag asn1SccBase_samples_frame_frame_mode_t_Equal(const asn1SccBase_samples_frame_frame_mode_t* pVal1, const asn1SccBase_samples_frame_frame_mode_t* pVal2);

void asn1SccBase_samples_frame_frame_mode_t_Initialize(asn1SccBase_samples_frame_frame_mode_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_MODE_T		149  /**/
flag asn1SccBase_samples_frame_frame_mode_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_mode_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		150  /**/
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BITS_FOR_ENCODING        4

flag asn1SccBase_samples_frame_frame_mode_t_Encode(const asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		151  /**/
flag asn1SccBase_samples_frame_frame_mode_t_Decode(asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccstatus_empty = 0,
    asn1Sccstatus_invalid = 1,
    asn1Sccstatus_valid = 2
} asn1SccBase_samples_frame_frame_status_t;

flag asn1SccBase_samples_frame_frame_status_t_Equal(const asn1SccBase_samples_frame_frame_status_t* pVal1, const asn1SccBase_samples_frame_frame_status_t* pVal2);

void asn1SccBase_samples_frame_frame_status_t_Initialize(asn1SccBase_samples_frame_frame_status_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_STATUS_T		156  /**/
flag asn1SccBase_samples_frame_frame_status_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_status_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		157  /**/
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_frame_frame_status_t_Encode(const asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		158  /**/
flag asn1SccBase_samples_frame_frame_status_t_Decode(asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_frame_Frame_image;

typedef struct {    int nCount; 
    
    asn1SccBase_samples_frame_frame_attrib_t arr[200];
} asn1SccBase_samples_frame_Frame_attributes;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Time received_time;
    asn1SccBase_samples_frame_Frame_image image;
    asn1SccBase_samples_frame_Frame_attributes attributes;
    asn1SccBase_samples_frame_frame_size_t size_val;
    asn1SccT_UInt32 data_depth;
    asn1SccT_UInt32 pixel_size;
    asn1SccT_UInt32 row_size;
    asn1SccBase_samples_frame_frame_mode_t frame_mode;
    asn1SccBase_samples_frame_frame_status_t frame_status;
} asn1SccBase_samples_frame_Frame;

flag asn1SccBase_samples_frame_Frame_image_Equal(const asn1SccBase_samples_frame_Frame_image* pVal1, const asn1SccBase_samples_frame_Frame_image* pVal2);

flag asn1SccBase_samples_frame_Frame_attributes_Equal(const asn1SccBase_samples_frame_Frame_attributes* pVal1, const asn1SccBase_samples_frame_Frame_attributes* pVal2);

flag asn1SccBase_samples_frame_Frame_Equal(const asn1SccBase_samples_frame_Frame* pVal1, const asn1SccBase_samples_frame_Frame* pVal2);

void asn1SccBase_samples_frame_Frame_image_Initialize(asn1SccBase_samples_frame_Frame_image* pVal);
void asn1SccBase_samples_frame_Frame_attributes_Initialize(asn1SccBase_samples_frame_Frame_attributes* pVal);
void asn1SccBase_samples_frame_Frame_Initialize(asn1SccBase_samples_frame_Frame* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		5017  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		5038  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM		5059  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE		5070  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		5077  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		5088  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5109  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		5116  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5127  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5148  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5159  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5170  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5181  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5192  /**/
flag asn1SccBase_samples_frame_Frame_IsConstraintValid(const asn1SccBase_samples_frame_Frame* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME		5203  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		5034  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		5055  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		5071  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM_2		5066  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5110  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5105  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5144  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5155  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5166  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5177  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5188  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5199  /**/
#define asn1SccBase_samples_frame_Frame_REQUIRED_BYTES_FOR_ENCODING       80635 
#define asn1SccBase_samples_frame_Frame_REQUIRED_BITS_FOR_ENCODING        645078

flag asn1SccBase_samples_frame_Frame_Encode(const asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME		5204  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		5035  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		5056  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		5072  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM_2		5067  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5111  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5106  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5145  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5156  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5167  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5178  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5189  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5200  /**/
flag asn1SccBase_samples_frame_Frame_Decode(asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_frame_Frame first;
    asn1SccBase_samples_frame_Frame second;
    asn1SccT_UInt32 id;
} asn1SccBase_samples_frame_FramePair;

flag asn1SccBase_samples_frame_FramePair_Equal(const asn1SccBase_samples_frame_FramePair* pVal1, const asn1SccBase_samples_frame_FramePair* pVal2);

void asn1SccBase_samples_frame_FramePair_Initialize(asn1SccBase_samples_frame_FramePair* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5209  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5230  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5251  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE_ELM		5272  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5283  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5290  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5301  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5322  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5329  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5340  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5361  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5372  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5383  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5394  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5405  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5426  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5447  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE_ELM		5468  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5479  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5486  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5497  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5518  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5525  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5536  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5557  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5568  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5579  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5590  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5601  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5622  /**/
flag asn1SccBase_samples_frame_FramePair_IsConstraintValid(const asn1SccBase_samples_frame_FramePair* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5633  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5226  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5422  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5618  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5629  /**/
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BYTES_FOR_ENCODING       161282 
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BITS_FOR_ENCODING        1290252

flag asn1SccBase_samples_frame_FramePair_Encode(const asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5634  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5227  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5423  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5619  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5630  /**/
flag asn1SccBase_samples_frame_FramePair_Decode(asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccdegenerate = 0,
    asn1Sccpolynomial_bezier = 1,
    asn1Sccpolynomial_bspline = 2,
    asn1Sccrational_bezier = 3,
    asn1Sccrational_bspline = 4
} asn1SccWrappers_geometry_SplineType;

flag asn1SccWrappers_geometry_SplineType_Equal(const asn1SccWrappers_geometry_SplineType* pVal1, const asn1SccWrappers_geometry_SplineType* pVal2);

void asn1SccWrappers_geometry_SplineType_Initialize(asn1SccWrappers_geometry_SplineType* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINETYPE		163  /**/
flag asn1SccWrappers_geometry_SplineType_IsConstraintValid(const asn1SccWrappers_geometry_SplineType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINETYPE		164  /**/
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccWrappers_geometry_SplineType_Encode(const asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINETYPE		165  /**/
flag asn1SccWrappers_geometry_SplineType_Decode(asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_knots;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_vertices;

typedef struct {
    asn1SccT_Double geometric_resolution;
    asn1SccT_Int32 dimension;
    asn1SccT_Int32 curve_order;
    asn1SccWrappers_geometry_SplineType kind;
    asn1SccWrappers_geometry_Spline_knots knots;
    asn1SccWrappers_geometry_Spline_vertices vertices;
} asn1SccWrappers_geometry_Spline;

flag asn1SccWrappers_geometry_Spline_knots_Equal(const asn1SccWrappers_geometry_Spline_knots* pVal1, const asn1SccWrappers_geometry_Spline_knots* pVal2);

flag asn1SccWrappers_geometry_Spline_vertices_Equal(const asn1SccWrappers_geometry_Spline_vertices* pVal1, const asn1SccWrappers_geometry_Spline_vertices* pVal2);

flag asn1SccWrappers_geometry_Spline_Equal(const asn1SccWrappers_geometry_Spline* pVal1, const asn1SccWrappers_geometry_Spline* pVal2);

void asn1SccWrappers_geometry_Spline_knots_Initialize(asn1SccWrappers_geometry_Spline_knots* pVal);
void asn1SccWrappers_geometry_Spline_vertices_Initialize(asn1SccWrappers_geometry_Spline_vertices* pVal);
void asn1SccWrappers_geometry_Spline_Initialize(asn1SccWrappers_geometry_Spline* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		7901  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		7912  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		7923  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KIND		7934  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		7945  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7956  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		7963  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7974  /**/
flag asn1SccWrappers_geometry_Spline_IsConstraintValid(const asn1SccWrappers_geometry_Spline* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE		7981  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7908  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7919  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7930  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7941  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7957  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7952  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7975  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7970  /**/
#define asn1SccWrappers_geometry_Spline_REQUIRED_BYTES_FOR_ENCODING       5224 
#define asn1SccWrappers_geometry_Spline_REQUIRED_BITS_FOR_ENCODING        41787

flag asn1SccWrappers_geometry_Spline_Encode(const asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE		7982  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7909  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7920  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7931  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7942  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7958  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7953  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7976  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7971  /**/
flag asn1SccWrappers_geometry_Spline_Decode(asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;
} asn1SccBase_Trajectory;

flag asn1SccBase_Trajectory_Equal(const asn1SccBase_Trajectory* pVal1, const asn1SccBase_Trajectory* pVal2);

void asn1SccBase_Trajectory_Initialize(asn1SccBase_Trajectory* pVal);

#define ERR_BASE_TRAJECTORY_SPEED		1141  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1152  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_DIMENSION		1163  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1174  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KIND		1185  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1196  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS		1207  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1214  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES		1225  /**/
flag asn1SccBase_Trajectory_IsConstraintValid(const asn1SccBase_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY		1242  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPEED_2		1148  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPLINE_2		1238  /**/
#define asn1SccBase_Trajectory_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_Encode(const asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY		1243  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPEED_2		1149  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPLINE_2		1239  /**/
flag asn1SccBase_Trajectory_Decode(asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;
} asn1SccBase_Trajectory_m;

flag asn1SccBase_Trajectory_m_Equal(const asn1SccBase_Trajectory_m* pVal1, const asn1SccBase_Trajectory_m* pVal2);

void asn1SccBase_Trajectory_m_Initialize(asn1SccBase_Trajectory_m* pVal);

#define ERR_BASE_TRAJECTORY_M_SPEED		7987  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		7998  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_DIMENSION		8009  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		8020  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KIND		8031  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		8042  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS		8053  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		8060  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES		8071  /**/
flag asn1SccBase_Trajectory_m_IsConstraintValid(const asn1SccBase_Trajectory_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M		8088  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPEED_2		7994  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPLINE_2		8084  /**/
#define asn1SccBase_Trajectory_m_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_m_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_m_Encode(const asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY_M		8089  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPEED_2		7995  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPLINE_2		8085  /**/
flag asn1SccBase_Trajectory_m_Decode(asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Trajectory_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		495  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		506  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		517  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		528  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		539  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		550  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		561  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		568  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		579  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		606  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		607  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		602  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BYTES_FOR_ENCODING       1047276 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BITS_FOR_ENCODING        8378208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		608  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		603  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef char asn1SccVizkit3D_FilePath[256];

flag asn1SccVizkit3D_FilePath_Equal(const asn1SccVizkit3D_FilePath val1, const asn1SccVizkit3D_FilePath val2);

void asn1SccVizkit3D_FilePath_Initialize(asn1SccVizkit3D_FilePath val);

#define ERR_VIZKIT3D_FILEPATH		8094  /**/
flag asn1SccVizkit3D_FilePath_IsConstraintValid(const asn1SccVizkit3D_FilePath val, int* pErrCode);

#define ERR_UPER_ENCODE_VIZKIT3D_FILEPATH		8095  /**/
#define asn1SccVizkit3D_FilePath_REQUIRED_BYTES_FOR_ENCODING       225 
#define asn1SccVizkit3D_FilePath_REQUIRED_BITS_FOR_ENCODING        1793

flag asn1SccVizkit3D_FilePath_Encode(const asn1SccVizkit3D_FilePath val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_VIZKIT3D_FILEPATH		8096  /**/
flag asn1SccVizkit3D_FilePath_Decode(asn1SccVizkit3D_FilePath val, BitStream* pBitStrm, int* pErrCode);

typedef char asn1SccVizkit3D_PluginLabel[32];

flag asn1SccVizkit3D_PluginLabel_Equal(const asn1SccVizkit3D_PluginLabel val1, const asn1SccVizkit3D_PluginLabel val2);

void asn1SccVizkit3D_PluginLabel_Initialize(asn1SccVizkit3D_PluginLabel val);

#define ERR_VIZKIT3D_PLUGINLABEL		8101  /**/
flag asn1SccVizkit3D_PluginLabel_IsConstraintValid(const asn1SccVizkit3D_PluginLabel val, int* pErrCode);

#define ERR_UPER_ENCODE_VIZKIT3D_PLUGINLABEL		8102  /**/
#define asn1SccVizkit3D_PluginLabel_REQUIRED_BYTES_FOR_ENCODING       28 
#define asn1SccVizkit3D_PluginLabel_REQUIRED_BITS_FOR_ENCODING        222

flag asn1SccVizkit3D_PluginLabel_Encode(const asn1SccVizkit3D_PluginLabel val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_VIZKIT3D_PLUGINLABEL		8103  /**/
flag asn1SccVizkit3D_PluginLabel_Decode(asn1SccVizkit3D_PluginLabel val, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccT_UInt32 numT_String;
extern const asn1SccT_UInt32 vizkit3d_PathMaxSize;
extern const asn1SccT_UInt32 vizkit3d_LabelMaxSize;
extern const asn1SccT_UInt32 numBase_JointTrajectory;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_JointTransform;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Waypoint;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Wrench;
extern const asn1SccT_UInt32 numStd_vector_Wrappers_Vector4d;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Trajectory;
extern const asn1SccT_UInt32 numBase_JointLimits_names;
extern const asn1SccT_UInt32 numBase_JointLimits_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_names;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_times_val;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointState_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_elements;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_timestamps;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_vertical_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_horizontal_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_distances;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_remissions;
extern const asn1SccT_UInt32 numBase_samples_DistanceImage_data;
extern const asn1SccT_UInt32 numBase_commands_Joints_names;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_ranges;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_remission;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_colors;
extern const asn1SccT_UInt32 numBase_samples_Sonar_timestamps;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bearings;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bins;
extern const asn1SccT_UInt32 numBase_samples_SonarBeam_beam;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_data;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_time_beams;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_names;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_elements;
extern const asn1SccT_UInt32 numBase_JointTransformVector_names;
extern const asn1SccT_UInt32 numBase_JointTransformVector_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_elements;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_image;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_attributes;
extern const asn1SccT_UInt32 numWrappers_MatrixXd_data;
extern const asn1SccT_UInt32 numWrappers_VectorXd_data;
extern const asn1SccT_UInt32 numBase_JointTransformVector_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_JointTransform_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_Wrench_m_names;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_colors;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_m_names;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_knots;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_vertices; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif