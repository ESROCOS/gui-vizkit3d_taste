#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef enum {
    asn1Sccacceleration = 0,
    asn1Scceffort = 1,
    asn1Sccposition = 2,
    asn1Sccraw = 3,
    asn1Sccspeed = 4,
    asn1Sccunset = 5
} asn1SccBase_JointState_MODE;

flag asn1SccBase_JointState_MODE_Equal(const asn1SccBase_JointState_MODE* pVal1, const asn1SccBase_JointState_MODE* pVal2);

void asn1SccBase_JointState_MODE_Initialize(asn1SccBase_JointState_MODE* pVal);

#define ERR_BASE_JOINTSTATE_MODE		16  /**/
flag asn1SccBase_JointState_MODE_IsConstraintValid(const asn1SccBase_JointState_MODE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE_MODE		17  /**/
#define asn1SccBase_JointState_MODE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_JointState_MODE_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_JointState_MODE_Encode(const asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE_MODE		18  /**/
flag asn1SccBase_JointState_MODE_Decode(asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccmicroseconds = 0,
    asn1Sccmilliseconds = 1,
    asn1Sccseconds = 2
} asn1SccBase_Time_Resolution;

flag asn1SccBase_Time_Resolution_Equal(const asn1SccBase_Time_Resolution* pVal1, const asn1SccBase_Time_Resolution* pVal2);

void asn1SccBase_Time_Resolution_Initialize(asn1SccBase_Time_Resolution* pVal);

#define ERR_BASE_TIME_RESOLUTION		23  /**/
flag asn1SccBase_Time_Resolution_IsConstraintValid(const asn1SccBase_Time_Resolution* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME_RESOLUTION		24  /**/
#define asn1SccBase_Time_Resolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_Time_Resolution_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_Time_Resolution_Encode(const asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME_RESOLUTION		25  /**/
flag asn1SccBase_Time_Resolution_Decode(asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccderivative_to_next = 0,
    asn1Sccderivative_to_prior = 1,
    asn1Sccknuckle_point = 2,
    asn1Sccordinary_point = 3,
    asn1Sccsecond_derivative_to_next = 4,
    asn1Sccsecond_derivative_to_prior = 5,
    asn1Scctangent_point_for_next = 6,
    asn1Scctangent_point_for_prior = 7
} asn1SccBase_geometry_SplineBase_CoordinateType;

flag asn1SccBase_geometry_SplineBase_CoordinateType_Equal(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal1, const asn1SccBase_geometry_SplineBase_CoordinateType* pVal2);

void asn1SccBase_geometry_SplineBase_CoordinateType_Initialize(asn1SccBase_geometry_SplineBase_CoordinateType* pVal);

#define ERR_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		30  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_IsConstraintValid(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		31  /**/
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_geometry_SplineBase_CoordinateType_Encode(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		32  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_Decode(asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_measurement_error = 0,
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_too_far = 1,
    asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_too_near = 2,
    asn1Sccvalid_measurement = 3
} asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE;

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Equal(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal1, const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal2);

void asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Initialize(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		37  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_IsConstraintValid(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		38  /**/
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Encode(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		39  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Decode(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccplanar = 0,
    asn1Sccpolar = 1
} asn1SccBase_samples_DepthMap_PROJECTION_TYPE;

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Equal(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal1, const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal2);

void asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Initialize(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		44  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_IsConstraintValid(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		45  /**/
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Encode(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		46  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Decode(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccunit_x = 0,
    asn1Sccunit_y = 1,
    asn1Sccunit_z = 2
} asn1SccBase_samples_DepthMap_UNIT_AXIS;

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Equal(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal1, const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal2);

void asn1SccBase_samples_DepthMap_UNIT_AXIS_Initialize(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		51  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_IsConstraintValid(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		52  /**/
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Encode(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		53  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Decode(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccend_laser_range_errors = 0,
    asn1Sccmax_range_error = 1,
    asn1SccBase_samples_LASER_RANGE_ERRORS_measurement_error = 2,
    asn1Sccother_range_errors = 3,
    asn1SccBase_samples_LASER_RANGE_ERRORS_too_far = 4,
    asn1SccBase_samples_LASER_RANGE_ERRORS_too_near = 5
} asn1SccBase_samples_LASER_RANGE_ERRORS;

flag asn1SccBase_samples_LASER_RANGE_ERRORS_Equal(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal1, const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal2);

void asn1SccBase_samples_LASER_RANGE_ERRORS_Initialize(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal);

#define ERR_BASE_SAMPLES_LASER_RANGE_ERRORS		58  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_IsConstraintValid(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASER_RANGE_ERRORS		59  /**/
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_samples_LASER_RANGE_ERRORS_Encode(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASER_RANGE_ERRORS		60  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_Decode(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Scccompressed_modes = 0,
    asn1Sccmode_bayer = 1,
    asn1Sccmode_bayer_bggr = 2,
    asn1Sccmode_bayer_gbrg = 3,
    asn1Sccmode_bayer_grbg = 4,
    asn1Sccmode_bayer_rggb = 5,
    asn1Sccmode_bgr = 6,
    asn1Sccmode_grayscale = 7,
    asn1Sccmode_jpeg = 8,
    asn1Sccmode_pjpg = 9,
    asn1Sccmode_png = 10,
    asn1Sccmode_rgb = 11,
    asn1Sccmode_rgb32 = 12,
    asn1Sccmode_undefined = 13,
    asn1Sccmode_uyvy = 14,
    asn1Sccraw_modes = 15
} asn1SccBase_samples_frame_frame_mode_t;

flag asn1SccBase_samples_frame_frame_mode_t_Equal(const asn1SccBase_samples_frame_frame_mode_t* pVal1, const asn1SccBase_samples_frame_frame_mode_t* pVal2);

void asn1SccBase_samples_frame_frame_mode_t_Initialize(asn1SccBase_samples_frame_frame_mode_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_MODE_T		65  /**/
flag asn1SccBase_samples_frame_frame_mode_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_mode_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		66  /**/
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BITS_FOR_ENCODING        4

flag asn1SccBase_samples_frame_frame_mode_t_Encode(const asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		67  /**/
flag asn1SccBase_samples_frame_frame_mode_t_Decode(asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccstatus_empty = 0,
    asn1Sccstatus_invalid = 1,
    asn1Sccstatus_valid = 2
} asn1SccBase_samples_frame_frame_status_t;

flag asn1SccBase_samples_frame_frame_status_t_Equal(const asn1SccBase_samples_frame_frame_status_t* pVal1, const asn1SccBase_samples_frame_frame_status_t* pVal2);

void asn1SccBase_samples_frame_frame_status_t_Initialize(asn1SccBase_samples_frame_frame_status_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_STATUS_T		72  /**/
flag asn1SccBase_samples_frame_frame_status_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_status_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		73  /**/
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_frame_frame_status_t_Encode(const asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		74  /**/
flag asn1SccBase_samples_frame_frame_status_t_Decode(asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    asn1Sccdegenerate = 0,
    asn1Sccpolynomial_bezier = 1,
    asn1Sccpolynomial_bspline = 2,
    asn1Sccrational_bezier = 3,
    asn1Sccrational_bspline = 4
} asn1SccWrappers_geometry_SplineType;

flag asn1SccWrappers_geometry_SplineType_Equal(const asn1SccWrappers_geometry_SplineType* pVal1, const asn1SccWrappers_geometry_SplineType* pVal2);

void asn1SccWrappers_geometry_SplineType_Initialize(asn1SccWrappers_geometry_SplineType* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINETYPE		79  /**/
flag asn1SccWrappers_geometry_SplineType_IsConstraintValid(const asn1SccWrappers_geometry_SplineType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINETYPE		80  /**/
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccWrappers_geometry_SplineType_Encode(const asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINETYPE		81  /**/
flag asn1SccWrappers_geometry_SplineType_Decode(asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Double;


flag asn1SccT_Double_Equal(const asn1SccT_Double* pVal1, const asn1SccT_Double* pVal2);

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		8010  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		8011  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		8012  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double rad;
} asn1SccBase_Angle;

flag asn1SccBase_Angle_Equal(const asn1SccBase_Angle* pVal1, const asn1SccBase_Angle* pVal2);

void asn1SccBase_Angle_Initialize(asn1SccBase_Angle* pVal);

#define ERR_BASE_ANGLE_RAD		855  /**/
flag asn1SccBase_Angle_IsConstraintValid(const asn1SccBase_Angle* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_ANGLE		866  /**/
#define ERR_UPER_ENCODE_BASE_ANGLE_RAD_2		862  /**/
#define asn1SccBase_Angle_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Angle_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Angle_Encode(const asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_ANGLE		867  /**/
#define ERR_UPER_DECODE_BASE_ANGLE_RAD_2		863  /**/
flag asn1SccBase_Angle_Decode(asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
} asn1SccBase_commands_Motion2D;

flag asn1SccBase_commands_Motion2D_Equal(const asn1SccBase_commands_Motion2D* pVal1, const asn1SccBase_commands_Motion2D* pVal2);

void asn1SccBase_commands_Motion2D_Initialize(asn1SccBase_commands_Motion2D* pVal);

#define ERR_BASE_COMMANDS_MOTION2D_TRANSLATION		1520  /**/
#define ERR_BASE_COMMANDS_MOTION2D_ROTATION		1531  /**/
#define ERR_BASE_COMMANDS_MOTION2D_HEADING_RAD		1542  /**/
flag asn1SccBase_commands_Motion2D_IsConstraintValid(const asn1SccBase_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D		1563  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1527  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1538  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_HEADING_2		1559  /**/
#define asn1SccBase_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccBase_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccBase_commands_Motion2D_Encode(const asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D		1564  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1528  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1539  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_HEADING_2		1560  /**/
flag asn1SccBase_commands_Motion2D_Decode(asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;
} asn1SccBase_PoseUpdateThreshold;

flag asn1SccBase_PoseUpdateThreshold_Equal(const asn1SccBase_PoseUpdateThreshold* pVal1, const asn1SccBase_PoseUpdateThreshold* pVal2);

void asn1SccBase_PoseUpdateThreshold_Initialize(asn1SccBase_PoseUpdateThreshold* pVal);

#define ERR_BASE_POSEUPDATETHRESHOLD_DISTANCE		978  /**/
#define ERR_BASE_POSEUPDATETHRESHOLD_ANGLE		989  /**/
flag asn1SccBase_PoseUpdateThreshold_IsConstraintValid(const asn1SccBase_PoseUpdateThreshold* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD		1000  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		985  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		996  /**/
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208

flag asn1SccBase_PoseUpdateThreshold_Encode(const asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD		1001  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		986  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		997  /**/
flag asn1SccBase_PoseUpdateThreshold_Decode(asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double kelvin;
} asn1SccBase_Temperature;

flag asn1SccBase_Temperature_Equal(const asn1SccBase_Temperature* pVal1, const asn1SccBase_Temperature* pVal2);

void asn1SccBase_Temperature_Initialize(asn1SccBase_Temperature* pVal);

#define ERR_BASE_TEMPERATURE_KELVIN		1023  /**/
flag asn1SccBase_Temperature_IsConstraintValid(const asn1SccBase_Temperature* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TEMPERATURE		1034  /**/
#define ERR_UPER_ENCODE_BASE_TEMPERATURE_KELVIN_2		1030  /**/
#define asn1SccBase_Temperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Temperature_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Temperature_Encode(const asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TEMPERATURE		1035  /**/
#define ERR_UPER_DECODE_BASE_TEMPERATURE_KELVIN_2		1031  /**/
flag asn1SccBase_Temperature_Decode(asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double surge;
    asn1SccT_Double sway;
    asn1SccT_Double heave;
    asn1SccT_Double roll;
    asn1SccT_Double pitch;
    asn1SccT_Double yaw;
} asn1SccBase_commands_Speed6D;

flag asn1SccBase_commands_Speed6D_Equal(const asn1SccBase_commands_Speed6D* pVal1, const asn1SccBase_commands_Speed6D* pVal2);

void asn1SccBase_commands_Speed6D_Initialize(asn1SccBase_commands_Speed6D* pVal);

#define ERR_BASE_COMMANDS_SPEED6D_SURGE		1569  /**/
#define ERR_BASE_COMMANDS_SPEED6D_SWAY		1580  /**/
#define ERR_BASE_COMMANDS_SPEED6D_HEAVE		1591  /**/
#define ERR_BASE_COMMANDS_SPEED6D_ROLL		1602  /**/
#define ERR_BASE_COMMANDS_SPEED6D_PITCH		1613  /**/
#define ERR_BASE_COMMANDS_SPEED6D_YAW		1624  /**/
flag asn1SccBase_commands_Speed6D_IsConstraintValid(const asn1SccBase_commands_Speed6D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D		1635  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SURGE_2		1576  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SWAY_2		1587  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1598  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_ROLL_2		1609  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_PITCH_2		1620  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_YAW_2		1631  /**/
#define asn1SccBase_commands_Speed6D_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccBase_commands_Speed6D_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccBase_commands_Speed6D_Encode(const asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D		1636  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SURGE_2		1577  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SWAY_2		1588  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1599  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_ROLL_2		1610  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_PITCH_2		1621  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_YAW_2		1632  /**/
flag asn1SccBase_commands_Speed6D_Decode(asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_AngleAxisd_axis;

typedef struct {
    asn1SccT_Double angle;
    asn1SccWrappers_AngleAxisd_axis axis;
} asn1SccWrappers_AngleAxisd;

flag asn1SccWrappers_AngleAxisd_axis_Equal(const asn1SccWrappers_AngleAxisd_axis* pVal1, const asn1SccWrappers_AngleAxisd_axis* pVal2);

flag asn1SccWrappers_AngleAxisd_Equal(const asn1SccWrappers_AngleAxisd* pVal1, const asn1SccWrappers_AngleAxisd* pVal2);

void asn1SccWrappers_AngleAxisd_axis_Initialize(asn1SccWrappers_AngleAxisd_axis* pVal);
void asn1SccWrappers_AngleAxisd_Initialize(asn1SccWrappers_AngleAxisd* pVal);

#define ERR_WRAPPERS_ANGLEAXISD_ANGLE		5555  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS_ELM		5566  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS		5577  /**/
flag asn1SccWrappers_AngleAxisd_IsConstraintValid(const asn1SccWrappers_AngleAxisd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD		5584  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5562  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS		5578  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5573  /**/
#define asn1SccWrappers_AngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_AngleAxisd_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_AngleAxisd_Encode(const asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD		5585  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5563  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS		5579  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5574  /**/
flag asn1SccWrappers_AngleAxisd_Decode(asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccWrappers_Vector2d_data;

typedef struct {
    asn1SccWrappers_Vector2d_data data;
} asn1SccWrappers_Vector2d;

flag asn1SccWrappers_Vector2d_data_Equal(const asn1SccWrappers_Vector2d_data* pVal1, const asn1SccWrappers_Vector2d_data* pVal2);

flag asn1SccWrappers_Vector2d_Equal(const asn1SccWrappers_Vector2d* pVal1, const asn1SccWrappers_Vector2d* pVal2);

void asn1SccWrappers_Vector2d_data_Initialize(asn1SccWrappers_Vector2d_data* pVal);
void asn1SccWrappers_Vector2d_Initialize(asn1SccWrappers_Vector2d* pVal);

#define ERR_WRAPPERS_VECTOR2D_DATA_ELM		5590  /**/
#define ERR_WRAPPERS_VECTOR2D_DATA		5601  /**/
flag asn1SccWrappers_Vector2d_IsConstraintValid(const asn1SccWrappers_Vector2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D		5608  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA		5602  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5597  /**/
#define asn1SccWrappers_Vector2d_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccWrappers_Vector2d_REQUIRED_BITS_FOR_ENCODING        209

flag asn1SccWrappers_Vector2d_Encode(const asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D		5609  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA		5603  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5598  /**/
flag asn1SccWrappers_Vector2d_Decode(asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;
} asn1SccBase_Pose2D;

flag asn1SccBase_Pose2D_Equal(const asn1SccBase_Pose2D* pVal1, const asn1SccBase_Pose2D* pVal2);

void asn1SccBase_Pose2D_Initialize(asn1SccBase_Pose2D* pVal);

#define ERR_BASE_POSE2D_POSITION_DATA_ELM		933  /**/
#define ERR_BASE_POSE2D_POSITION_DATA		944  /**/
#define ERR_BASE_POSE2D_ORIENTATION		961  /**/
flag asn1SccBase_Pose2D_IsConstraintValid(const asn1SccBase_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D		972  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_POSITION_2		957  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_ORIENTATION_2		968  /**/
#define asn1SccBase_Pose2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_Encode(const asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D		973  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_POSITION_2		958  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_ORIENTATION_2		969  /**/
flag asn1SccBase_Pose2D_Decode(asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;
} asn1SccBase_Pose2D_m;

flag asn1SccBase_Pose2D_m_Equal(const asn1SccBase_Pose2D_m* pVal1, const asn1SccBase_Pose2D_m* pVal2);

void asn1SccBase_Pose2D_m_Initialize(asn1SccBase_Pose2D_m* pVal);

#define ERR_BASE_POSE2D_M_POSITION_DATA_ELM		5943  /**/
#define ERR_BASE_POSE2D_M_POSITION_DATA		5954  /**/
#define ERR_BASE_POSE2D_M_ORIENTATION		5971  /**/
flag asn1SccBase_Pose2D_m_IsConstraintValid(const asn1SccBase_Pose2D_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D_M		5982  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_POSITION_2		5967  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_ORIENTATION_2		5978  /**/
#define asn1SccBase_Pose2D_m_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_m_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_m_Encode(const asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D_M		5983  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_POSITION_2		5968  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_ORIENTATION_2		5979  /**/
flag asn1SccBase_Pose2D_m_Decode(asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Matrix2d_data;

typedef struct {
    asn1SccWrappers_Matrix2d_data data;
} asn1SccWrappers_Matrix2d;

flag asn1SccWrappers_Matrix2d_data_Equal(const asn1SccWrappers_Matrix2d_data* pVal1, const asn1SccWrappers_Matrix2d_data* pVal2);

flag asn1SccWrappers_Matrix2d_Equal(const asn1SccWrappers_Matrix2d* pVal1, const asn1SccWrappers_Matrix2d* pVal2);

void asn1SccWrappers_Matrix2d_data_Initialize(asn1SccWrappers_Matrix2d_data* pVal);
void asn1SccWrappers_Matrix2d_Initialize(asn1SccWrappers_Matrix2d* pVal);

#define ERR_WRAPPERS_MATRIX2D_DATA_ELM		5614  /**/
#define ERR_WRAPPERS_MATRIX2D_DATA		5625  /**/
flag asn1SccWrappers_Matrix2d_IsConstraintValid(const asn1SccWrappers_Matrix2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D		5632  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA		5626  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5621  /**/
#define asn1SccWrappers_Matrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Matrix2d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Matrix2d_Encode(const asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D		5633  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA		5627  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5622  /**/
flag asn1SccWrappers_Matrix2d_Decode(asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Vector3d_data;

typedef struct {
    asn1SccWrappers_Vector3d_data data;
} asn1SccWrappers_Vector3d;

flag asn1SccWrappers_Vector3d_data_Equal(const asn1SccWrappers_Vector3d_data* pVal1, const asn1SccWrappers_Vector3d_data* pVal2);

flag asn1SccWrappers_Vector3d_Equal(const asn1SccWrappers_Vector3d* pVal1, const asn1SccWrappers_Vector3d* pVal2);

void asn1SccWrappers_Vector3d_data_Initialize(asn1SccWrappers_Vector3d_data* pVal);
void asn1SccWrappers_Vector3d_Initialize(asn1SccWrappers_Vector3d* pVal);

#define ERR_WRAPPERS_VECTOR3D_DATA_ELM		5638  /**/
#define ERR_WRAPPERS_VECTOR3D_DATA		5649  /**/
flag asn1SccWrappers_Vector3d_IsConstraintValid(const asn1SccWrappers_Vector3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D		5656  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA		5650  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5645  /**/
#define asn1SccWrappers_Vector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccWrappers_Vector3d_REQUIRED_BITS_FOR_ENCODING        314

flag asn1SccWrappers_Vector3d_Encode(const asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D		5657  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA		5651  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5646  /**/
flag asn1SccWrappers_Vector3d_Decode(asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
} asn1SccBase_Wrench;

flag asn1SccBase_Wrench_Equal(const asn1SccBase_Wrench* pVal1, const asn1SccBase_Wrench* pVal2);

void asn1SccBase_Wrench_Initialize(asn1SccBase_Wrench* pVal);

#define ERR_BASE_WRENCH_FORCE_DATA_ELM		793  /**/
#define ERR_BASE_WRENCH_FORCE_DATA		804  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA_ELM		821  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA		832  /**/
flag asn1SccBase_Wrench_IsConstraintValid(const asn1SccBase_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH		849  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_FORCE_2		817  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_TORQUE_2		845  /**/
#define asn1SccBase_Wrench_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_Encode(const asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH		850  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_FORCE_2		818  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_TORQUE_2		846  /**/
flag asn1SccBase_Wrench_Decode(asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccBase_Waypoint;

flag asn1SccBase_Waypoint_Equal(const asn1SccBase_Waypoint* pVal1, const asn1SccBase_Waypoint* pVal2);

void asn1SccBase_Waypoint_Initialize(asn1SccBase_Waypoint* pVal);

#define ERR_BASE_WAYPOINT_POSITION_DATA_ELM		1164  /**/
#define ERR_BASE_WAYPOINT_POSITION_DATA		1175  /**/
#define ERR_BASE_WAYPOINT_HEADING		1192  /**/
#define ERR_BASE_WAYPOINT_TOL_POSITION		1203  /**/
#define ERR_BASE_WAYPOINT_TOL_HEADING		1214  /**/
flag asn1SccBase_Waypoint_IsConstraintValid(const asn1SccBase_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT		1225  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_POSITION_2		1188  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_HEADING_2		1199  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_POSITION_2		1210  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_HEADING_2		1221  /**/
#define asn1SccBase_Waypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_Encode(const asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT		1226  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_POSITION_2		1189  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_HEADING_2		1200  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_POSITION_2		1211  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_HEADING_2		1222  /**/
flag asn1SccBase_Waypoint_Decode(asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccBase_Waypoint_m;

flag asn1SccBase_Waypoint_m_Equal(const asn1SccBase_Waypoint_m* pVal1, const asn1SccBase_Waypoint_m* pVal2);

void asn1SccBase_Waypoint_m_Initialize(asn1SccBase_Waypoint_m* pVal);

#define ERR_BASE_WAYPOINT_M_POSITION_DATA_ELM		6252  /**/
#define ERR_BASE_WAYPOINT_M_POSITION_DATA		6263  /**/
#define ERR_BASE_WAYPOINT_M_HEADING		6280  /**/
#define ERR_BASE_WAYPOINT_M_TOL_POSITION		6291  /**/
#define ERR_BASE_WAYPOINT_M_TOL_HEADING		6302  /**/
flag asn1SccBase_Waypoint_m_IsConstraintValid(const asn1SccBase_Waypoint_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT_M		6313  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_POSITION_2		6276  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_HEADING_2		6287  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_POSITION_2		6298  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_HEADING_2		6309  /**/
#define asn1SccBase_Waypoint_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_m_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_m_Encode(const asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT_M		6314  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_POSITION_2		6277  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_HEADING_2		6288  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_POSITION_2		6299  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_HEADING_2		6310  /**/
flag asn1SccBase_Waypoint_m_Decode(asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Waypoint_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		225  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		236  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		253  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		264  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		275  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		296  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		297  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		292  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BYTES_FOR_ENCODING       15651 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BITS_FOR_ENCODING        125208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		298  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		293  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
} asn1SccBase_Wrench_m;

flag asn1SccBase_Wrench_m_Equal(const asn1SccBase_Wrench_m* pVal1, const asn1SccBase_Wrench_m* pVal2);

void asn1SccBase_Wrench_m_Initialize(asn1SccBase_Wrench_m* pVal);

#define ERR_BASE_WRENCH_M_FORCE_DATA_ELM		6319  /**/
#define ERR_BASE_WRENCH_M_FORCE_DATA		6330  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA_ELM		6347  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA		6358  /**/
flag asn1SccBase_Wrench_m_IsConstraintValid(const asn1SccBase_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH_M		6375  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_FORCE_2		6343  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_TORQUE_2		6371  /**/
#define asn1SccBase_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_m_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_m_Encode(const asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH_M		6376  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_FORCE_2		6344  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_TORQUE_2		6372  /**/
flag asn1SccBase_Wrench_m_Decode(asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		303  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		314  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		331  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		342  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		369  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		370  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		365  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BYTES_FOR_ENCODING       15701 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BITS_FOR_ENCODING        125608

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		371  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		366  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[9];
} asn1SccWrappers_Matrix3d_data;

typedef struct {
    asn1SccWrappers_Matrix3d_data data;
} asn1SccWrappers_Matrix3d;

flag asn1SccWrappers_Matrix3d_data_Equal(const asn1SccWrappers_Matrix3d_data* pVal1, const asn1SccWrappers_Matrix3d_data* pVal2);

flag asn1SccWrappers_Matrix3d_Equal(const asn1SccWrappers_Matrix3d* pVal1, const asn1SccWrappers_Matrix3d* pVal2);

void asn1SccWrappers_Matrix3d_data_Initialize(asn1SccWrappers_Matrix3d_data* pVal);
void asn1SccWrappers_Matrix3d_Initialize(asn1SccWrappers_Matrix3d* pVal);

#define ERR_WRAPPERS_MATRIX3D_DATA_ELM		5662  /**/
#define ERR_WRAPPERS_MATRIX3D_DATA		5673  /**/
flag asn1SccWrappers_Matrix3d_IsConstraintValid(const asn1SccWrappers_Matrix3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D		5680  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA		5674  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5669  /**/
#define asn1SccWrappers_Matrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define asn1SccWrappers_Matrix3d_REQUIRED_BITS_FOR_ENCODING        940

flag asn1SccWrappers_Matrix3d_Encode(const asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D		5681  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA		5675  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5670  /**/
flag asn1SccWrappers_Matrix3d_Decode(asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Vector4d_data;

typedef struct {
    asn1SccWrappers_Vector4d_data data;
} asn1SccWrappers_Vector4d;

flag asn1SccWrappers_Vector4d_data_Equal(const asn1SccWrappers_Vector4d_data* pVal1, const asn1SccWrappers_Vector4d_data* pVal2);

flag asn1SccWrappers_Vector4d_Equal(const asn1SccWrappers_Vector4d* pVal1, const asn1SccWrappers_Vector4d* pVal2);

void asn1SccWrappers_Vector4d_data_Initialize(asn1SccWrappers_Vector4d_data* pVal);
void asn1SccWrappers_Vector4d_Initialize(asn1SccWrappers_Vector4d* pVal);

#define ERR_WRAPPERS_VECTOR4D_DATA_ELM		5686  /**/
#define ERR_WRAPPERS_VECTOR4D_DATA		5697  /**/
flag asn1SccWrappers_Vector4d_IsConstraintValid(const asn1SccWrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D		5704  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA		5698  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5693  /**/
#define asn1SccWrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Vector4d_Encode(const asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D		5705  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA		5699  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5694  /**/
flag asn1SccWrappers_Vector4d_Decode(asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccStd_vector_Wrappers_Vector4d;

flag asn1SccStd_vector_Wrappers_Vector4d_Equal(const asn1SccStd_vector_Wrappers_Vector4d* pVal1, const asn1SccStd_vector_Wrappers_Vector4d* pVal2);

void asn1SccStd_vector_Wrappers_Vector4d_Initialize(asn1SccStd_vector_Wrappers_Vector4d* pVal);

#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		376  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		387  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D		404  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_IsConstraintValid(const asn1SccStd_vector_Wrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D		405  /**/
#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		400  /**/
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       10451 
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        83608

flag asn1SccStd_vector_Wrappers_Vector4d_Encode(const asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D		406  /**/
#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		401  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_Decode(asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[16];
} asn1SccWrappers_Matrix4d_data;

typedef struct {
    asn1SccWrappers_Matrix4d_data data;
} asn1SccWrappers_Matrix4d;

flag asn1SccWrappers_Matrix4d_data_Equal(const asn1SccWrappers_Matrix4d_data* pVal1, const asn1SccWrappers_Matrix4d_data* pVal2);

flag asn1SccWrappers_Matrix4d_Equal(const asn1SccWrappers_Matrix4d* pVal1, const asn1SccWrappers_Matrix4d* pVal2);

void asn1SccWrappers_Matrix4d_data_Initialize(asn1SccWrappers_Matrix4d_data* pVal);
void asn1SccWrappers_Matrix4d_Initialize(asn1SccWrappers_Matrix4d* pVal);

#define ERR_WRAPPERS_MATRIX4D_DATA_ELM		5710  /**/
#define ERR_WRAPPERS_MATRIX4D_DATA		5721  /**/
flag asn1SccWrappers_Matrix4d_IsConstraintValid(const asn1SccWrappers_Matrix4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D		5728  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA		5722  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5717  /**/
#define asn1SccWrappers_Matrix4d_REQUIRED_BYTES_FOR_ENCODING       209 
#define asn1SccWrappers_Matrix4d_REQUIRED_BITS_FOR_ENCODING        1668

flag asn1SccWrappers_Matrix4d_Encode(const asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D		5729  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA		5723  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5718  /**/
flag asn1SccWrappers_Matrix4d_Decode(asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccWrappers_Vector6d_data;

typedef struct {
    asn1SccWrappers_Vector6d_data data;
} asn1SccWrappers_Vector6d;

flag asn1SccWrappers_Vector6d_data_Equal(const asn1SccWrappers_Vector6d_data* pVal1, const asn1SccWrappers_Vector6d_data* pVal2);

flag asn1SccWrappers_Vector6d_Equal(const asn1SccWrappers_Vector6d* pVal1, const asn1SccWrappers_Vector6d* pVal2);

void asn1SccWrappers_Vector6d_data_Initialize(asn1SccWrappers_Vector6d_data* pVal);
void asn1SccWrappers_Vector6d_Initialize(asn1SccWrappers_Vector6d* pVal);

#define ERR_WRAPPERS_VECTOR6D_DATA_ELM		5734  /**/
#define ERR_WRAPPERS_VECTOR6D_DATA		5745  /**/
flag asn1SccWrappers_Vector6d_IsConstraintValid(const asn1SccWrappers_Vector6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D		5752  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA		5746  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5741  /**/
#define asn1SccWrappers_Vector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccWrappers_Vector6d_REQUIRED_BITS_FOR_ENCODING        627

flag asn1SccWrappers_Vector6d_Encode(const asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D		5753  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA		5747  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5742  /**/
flag asn1SccWrappers_Vector6d_Decode(asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[36];
} asn1SccWrappers_Matrix6d_data;

typedef struct {
    asn1SccWrappers_Matrix6d_data data;
} asn1SccWrappers_Matrix6d;

flag asn1SccWrappers_Matrix6d_data_Equal(const asn1SccWrappers_Matrix6d_data* pVal1, const asn1SccWrappers_Matrix6d_data* pVal2);

flag asn1SccWrappers_Matrix6d_Equal(const asn1SccWrappers_Matrix6d* pVal1, const asn1SccWrappers_Matrix6d* pVal2);

void asn1SccWrappers_Matrix6d_data_Initialize(asn1SccWrappers_Matrix6d_data* pVal);
void asn1SccWrappers_Matrix6d_Initialize(asn1SccWrappers_Matrix6d* pVal);

#define ERR_WRAPPERS_MATRIX6D_DATA_ELM		5758  /**/
#define ERR_WRAPPERS_MATRIX6D_DATA		5769  /**/
flag asn1SccWrappers_Matrix6d_IsConstraintValid(const asn1SccWrappers_Matrix6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D		5776  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA		5770  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5765  /**/
#define asn1SccWrappers_Matrix6d_REQUIRED_BYTES_FOR_ENCODING       469 
#define asn1SccWrappers_Matrix6d_REQUIRED_BITS_FOR_ENCODING        3750

flag asn1SccWrappers_Matrix6d_Encode(const asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D		5777  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA		5771  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5766  /**/
flag asn1SccWrappers_Matrix6d_Decode(asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TwistWithCovariance;

flag asn1SccBase_TwistWithCovariance_Equal(const asn1SccBase_TwistWithCovariance* pVal1, const asn1SccBase_TwistWithCovariance* pVal2);

void asn1SccBase_TwistWithCovariance_Initialize(asn1SccBase_TwistWithCovariance* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		703  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA		714  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		731  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA		742  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		759  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA		770  /**/
flag asn1SccBase_TwistWithCovariance_IsConstraintValid(const asn1SccBase_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE		787  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_2		727  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_2		755  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_2		783  /**/
#define asn1SccBase_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_Encode(const asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE		788  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_2		728  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_2		756  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_COV_2		784  /**/
flag asn1SccBase_TwistWithCovariance_Decode(asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TwistWithCovariance_m;

flag asn1SccBase_TwistWithCovariance_m_Equal(const asn1SccBase_TwistWithCovariance_m* pVal1, const asn1SccBase_TwistWithCovariance_m* pVal2);

void asn1SccBase_TwistWithCovariance_m_Initialize(asn1SccBase_TwistWithCovariance_m* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6162  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6173  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6190  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6201  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6218  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6229  /**/
flag asn1SccBase_TwistWithCovariance_m_IsConstraintValid(const asn1SccBase_TwistWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M		6246  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6186  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6214  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6242  /**/
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_m_Encode(const asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M		6247  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6187  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6215  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6243  /**/
flag asn1SccBase_TwistWithCovariance_m_Decode(asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Quaterniond_im;

typedef struct {
    asn1SccWrappers_Quaterniond_im im;
    asn1SccT_Double re;
} asn1SccWrappers_Quaterniond;

flag asn1SccWrappers_Quaterniond_im_Equal(const asn1SccWrappers_Quaterniond_im* pVal1, const asn1SccWrappers_Quaterniond_im* pVal2);

flag asn1SccWrappers_Quaterniond_Equal(const asn1SccWrappers_Quaterniond* pVal1, const asn1SccWrappers_Quaterniond* pVal2);

void asn1SccWrappers_Quaterniond_im_Initialize(asn1SccWrappers_Quaterniond_im* pVal);
void asn1SccWrappers_Quaterniond_Initialize(asn1SccWrappers_Quaterniond* pVal);

#define ERR_WRAPPERS_QUATERNIOND_IM_ELM		5828  /**/
#define ERR_WRAPPERS_QUATERNIOND_IM		5839  /**/
#define ERR_WRAPPERS_QUATERNIOND_RE		5846  /**/
flag asn1SccWrappers_Quaterniond_IsConstraintValid(const asn1SccWrappers_Quaterniond* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND		5857  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM		5840  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5835  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_RE_2		5853  /**/
#define asn1SccWrappers_Quaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Quaterniond_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Quaterniond_Encode(const asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND		5858  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM		5841  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5836  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_RE_2		5854  /**/
flag asn1SccWrappers_Quaterniond_Decode(asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;
} asn1SccBase_Pose;

flag asn1SccBase_Pose_Equal(const asn1SccBase_Pose* pVal1, const asn1SccBase_Pose* pVal2);

void asn1SccBase_Pose_Initialize(asn1SccBase_Pose* pVal);

#define ERR_BASE_POSE_POSITION_DATA_ELM		529  /**/
#define ERR_BASE_POSE_POSITION_DATA		540  /**/
#define ERR_BASE_POSE_ORIENTATION_IM_ELM		557  /**/
#define ERR_BASE_POSE_ORIENTATION_IM		568  /**/
#define ERR_BASE_POSE_ORIENTATION_RE		575  /**/
flag asn1SccBase_Pose_IsConstraintValid(const asn1SccBase_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE		596  /**/
#define ERR_UPER_ENCODE_BASE_POSE_POSITION_2		553  /**/
#define ERR_UPER_ENCODE_BASE_POSE_ORIENTATION_2		592  /**/
#define asn1SccBase_Pose_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_Encode(const asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE		597  /**/
#define ERR_UPER_DECODE_BASE_POSE_POSITION_2		554  /**/
#define ERR_UPER_DECODE_BASE_POSE_ORIENTATION_2		593  /**/
flag asn1SccBase_Pose_Decode(asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TransformWithCovariance;

flag asn1SccBase_TransformWithCovariance_Equal(const asn1SccBase_TransformWithCovariance* pVal1, const asn1SccBase_TransformWithCovariance* pVal2);

void asn1SccBase_TransformWithCovariance_Initialize(asn1SccBase_TransformWithCovariance* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		602  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		613  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		630  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		641  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		648  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		669  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		680  /**/
flag asn1SccBase_TransformWithCovariance_IsConstraintValid(const asn1SccBase_TransformWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE		697  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		626  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		665  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		693  /**/
#define asn1SccBase_TransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_Encode(const asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE		698  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		627  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		666  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		694  /**/
flag asn1SccBase_TransformWithCovariance_Decode(asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;
} asn1SccBase_Pose_m;

flag asn1SccBase_Pose_m_Equal(const asn1SccBase_Pose_m* pVal1, const asn1SccBase_Pose_m* pVal2);

void asn1SccBase_Pose_m_Initialize(asn1SccBase_Pose_m* pVal);

#define ERR_BASE_POSE_M_POSITION_DATA_ELM		5988  /**/
#define ERR_BASE_POSE_M_POSITION_DATA		5999  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM_ELM		6016  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM		6027  /**/
#define ERR_BASE_POSE_M_ORIENTATION_RE		6034  /**/
flag asn1SccBase_Pose_m_IsConstraintValid(const asn1SccBase_Pose_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE_M		6055  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_POSITION_2		6012  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_ORIENTATION_2		6051  /**/
#define asn1SccBase_Pose_m_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_m_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_m_Encode(const asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE_M		6056  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_POSITION_2		6013  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_ORIENTATION_2		6052  /**/
flag asn1SccBase_Pose_m_Decode(asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;
} asn1SccBase_TransformWithCovariance_m;

flag asn1SccBase_TransformWithCovariance_m_Equal(const asn1SccBase_TransformWithCovariance_m* pVal1, const asn1SccBase_TransformWithCovariance_m* pVal2);

void asn1SccBase_TransformWithCovariance_m_Initialize(asn1SccBase_TransformWithCovariance_m* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6061  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6072  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6089  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6100  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6107  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6128  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6139  /**/
flag asn1SccBase_TransformWithCovariance_m_IsConstraintValid(const asn1SccBase_TransformWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M		6156  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6085  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6124  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6152  /**/
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_m_Encode(const asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M		6157  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6086  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6125  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6153  /**/
flag asn1SccBase_TransformWithCovariance_m_Decode(asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_VectorXd_data;

typedef struct {
    asn1SccWrappers_VectorXd_data data;
} asn1SccWrappers_VectorXd;

flag asn1SccWrappers_VectorXd_data_Equal(const asn1SccWrappers_VectorXd_data* pVal1, const asn1SccWrappers_VectorXd_data* pVal2);

flag asn1SccWrappers_VectorXd_Equal(const asn1SccWrappers_VectorXd* pVal1, const asn1SccWrappers_VectorXd* pVal2);

void asn1SccWrappers_VectorXd_data_Initialize(asn1SccWrappers_VectorXd_data* pVal);
void asn1SccWrappers_VectorXd_Initialize(asn1SccWrappers_VectorXd* pVal);

#define ERR_WRAPPERS_VECTORXD_DATA_ELM		5863  /**/
#define ERR_WRAPPERS_VECTORXD_DATA		5874  /**/
flag asn1SccWrappers_VectorXd_IsConstraintValid(const asn1SccWrappers_VectorXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD		5881  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA		5875  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA_ELM_2		5870  /**/
#define asn1SccWrappers_VectorXd_REQUIRED_BYTES_FOR_ENCODING       2601 
#define asn1SccWrappers_VectorXd_REQUIRED_BITS_FOR_ENCODING        20808

flag asn1SccWrappers_VectorXd_Encode(const asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTORXD		5882  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA		5876  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA_ELM_2		5871  /**/
flag asn1SccWrappers_VectorXd_Decode(asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Float;


flag asn1SccT_Float_Equal(const asn1SccT_Float* pVal1, const asn1SccT_Float* pVal2);

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		8017  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		8018  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		8019  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double position;
    asn1SccT_Float speed;
    asn1SccT_Float effort;
    asn1SccT_Float raw;
    asn1SccT_Float acceleration;
} asn1SccBase_JointState;

flag asn1SccBase_JointState_Equal(const asn1SccBase_JointState* pVal1, const asn1SccBase_JointState* pVal2);

void asn1SccBase_JointState_Initialize(asn1SccBase_JointState* pVal);

#define ERR_BASE_JOINTSTATE_POSITION		872  /**/
#define ERR_BASE_JOINTSTATE_SPEED		883  /**/
#define ERR_BASE_JOINTSTATE_EFFORT		894  /**/
#define ERR_BASE_JOINTSTATE_RAW		905  /**/
#define ERR_BASE_JOINTSTATE_ACCELERATION		916  /**/
flag asn1SccBase_JointState_IsConstraintValid(const asn1SccBase_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE		927  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_POSITION_2		879  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_SPEED_2		890  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_EFFORT_2		901  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_RAW_2		912  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_ACCELERATION_2		923  /**/
#define asn1SccBase_JointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccBase_JointState_REQUIRED_BITS_FOR_ENCODING        520

flag asn1SccBase_JointState_Encode(const asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE		928  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_POSITION_2		880  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_SPEED_2		891  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_EFFORT_2		902  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_RAW_2		913  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_ACCELERATION_2		924  /**/
flag asn1SccBase_JointState_Decode(asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_JointState arr[200];
} asn1SccBase_JointTrajectory;

flag asn1SccBase_JointTrajectory_Equal(const asn1SccBase_JointTrajectory* pVal1, const asn1SccBase_JointTrajectory* pVal2);

void asn1SccBase_JointTrajectory_Initialize(asn1SccBase_JointTrajectory* pVal);

#define ERR_BASE_JOINTTRAJECTORY_ELM_POSITION		86  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_SPEED		97  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_EFFORT		108  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_RAW		119  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		130  /**/
#define ERR_BASE_JOINTTRAJECTORY		151  /**/
flag asn1SccBase_JointTrajectory_IsConstraintValid(const asn1SccBase_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY		152  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY_ELM_2		147  /**/
#define asn1SccBase_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       13001 
#define asn1SccBase_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        104008

flag asn1SccBase_JointTrajectory_Encode(const asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY		153  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY_ELM_2		148  /**/
flag asn1SccBase_JointTrajectory_Decode(asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_JointState min;
    asn1SccBase_JointState max;
} asn1SccBase_JointLimitRange;

flag asn1SccBase_JointLimitRange_Equal(const asn1SccBase_JointLimitRange* pVal1, const asn1SccBase_JointLimitRange* pVal2);

void asn1SccBase_JointLimitRange_Initialize(asn1SccBase_JointLimitRange* pVal);

#define ERR_BASE_JOINTLIMITRANGE_MIN_POSITION		1231  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_SPEED		1242  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_EFFORT		1253  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_RAW		1264  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1275  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_POSITION		1296  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_SPEED		1307  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_EFFORT		1318  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_RAW		1329  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1340  /**/
flag asn1SccBase_JointLimitRange_IsConstraintValid(const asn1SccBase_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE		1361  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MIN_2		1292  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MAX_2		1357  /**/
#define asn1SccBase_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccBase_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040

flag asn1SccBase_JointLimitRange_Encode(const asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE		1362  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MIN_2		1293  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MAX_2		1358  /**/
flag asn1SccBase_JointLimitRange_Decode(asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float pascal;
} asn1SccBase_Pressure;

flag asn1SccBase_Pressure_Equal(const asn1SccBase_Pressure* pVal1, const asn1SccBase_Pressure* pVal2);

void asn1SccBase_Pressure_Initialize(asn1SccBase_Pressure* pVal);

#define ERR_BASE_PRESSURE_PASCAL		1006  /**/
flag asn1SccBase_Pressure_IsConstraintValid(const asn1SccBase_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_PRESSURE		1017  /**/
#define ERR_UPER_ENCODE_BASE_PRESSURE_PASCAL_2		1013  /**/
#define asn1SccBase_Pressure_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Pressure_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Pressure_Encode(const asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_PRESSURE		1018  /**/
#define ERR_UPER_DECODE_BASE_PRESSURE_PASCAL_2		1014  /**/
flag asn1SccBase_Pressure_Decode(asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int16;


flag asn1SccT_Int16_Equal(const asn1SccT_Int16* pVal1, const asn1SccT_Int16* pVal2);

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		8024  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		8025  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		8026  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


flag asn1SccT_UInt16_Equal(const asn1SccT_UInt16* pVal1, const asn1SccT_UInt16* pVal2);

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		8031  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		8032  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		8033  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
} asn1SccBase_samples_frame_frame_size_t;

flag asn1SccBase_samples_frame_frame_size_t_Equal(const asn1SccBase_samples_frame_frame_size_t* pVal1, const asn1SccBase_samples_frame_frame_size_t* pVal2);

void asn1SccBase_samples_frame_frame_size_t_Initialize(asn1SccBase_samples_frame_frame_size_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2308  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2319  /**/
flag asn1SccBase_samples_frame_frame_size_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_size_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2330  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2315  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2326  /**/
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccBase_samples_frame_frame_size_t_Encode(const asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2331  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2316  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2327  /**/
flag asn1SccBase_samples_frame_frame_size_t_Decode(asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


flag asn1SccT_UInt64_Equal(const asn1SccT_UInt64* pVal1, const asn1SccT_UInt64* pVal2);

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		8038  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		8039  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		8040  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int64;


flag asn1SccT_Int64_Equal(const asn1SccT_Int64* pVal1, const asn1SccT_Int64* pVal2);

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);

#define ERR_T_INT64		8045  /**/
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		8046  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Int64_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		8047  /**/
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Int64 microseconds;
} asn1SccBase_Time;

flag asn1SccBase_Time_Equal(const asn1SccBase_Time* pVal1, const asn1SccBase_Time* pVal2);

void asn1SccBase_Time_Initialize(asn1SccBase_Time* pVal);

#define ERR_BASE_TIME_MICROSECONDS		1040  /**/
flag asn1SccBase_Time_IsConstraintValid(const asn1SccBase_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME		1051  /**/
#define ERR_UPER_ENCODE_BASE_TIME_MICROSECONDS_2		1047  /**/
#define asn1SccBase_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccBase_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccBase_Time_Encode(const asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME		1052  /**/
#define ERR_UPER_DECODE_BASE_TIME_MICROSECONDS_2		1048  /**/
flag asn1SccBase_Time_Decode(asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;
} asn1SccBase_TimeStamped_Base_commands_Motion2D;

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Equal(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal1, const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal2);

void asn1SccBase_TimeStamped_Base_commands_Motion2D_Initialize(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal);

#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1367  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1378  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1389  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1410  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_IsConstraintValid(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1431  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1374  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1385  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1406  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1427  /**/
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Encode(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1432  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1375  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1386  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1407  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1428  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Decode(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;
} asn1SccBase_LinearAngular6DCommand;

flag asn1SccBase_LinearAngular6DCommand_Equal(const asn1SccBase_LinearAngular6DCommand* pVal1, const asn1SccBase_LinearAngular6DCommand* pVal2);

void asn1SccBase_LinearAngular6DCommand_Initialize(asn1SccBase_LinearAngular6DCommand* pVal);

#define ERR_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1437  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1458  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1469  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1486  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1497  /**/
flag asn1SccBase_LinearAngular6DCommand_IsConstraintValid(const asn1SccBase_LinearAngular6DCommand* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND		1514  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1454  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1482  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1510  /**/
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_LinearAngular6DCommand_Encode(const asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND		1515  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1455  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1483  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1511  /**/
flag asn1SccBase_LinearAngular6DCommand_Decode(asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance pose;
    asn1SccBase_TwistWithCovariance velocity;
} asn1SccBase_samples_BodyState;

flag asn1SccBase_samples_BodyState_Equal(const asn1SccBase_samples_BodyState* pVal1, const asn1SccBase_samples_BodyState* pVal2);

void asn1SccBase_samples_BodyState_Initialize(asn1SccBase_samples_BodyState* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1641  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1662  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1673  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1690  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1701  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1708  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1729  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1740  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1767  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1778  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1795  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1806  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1823  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1834  /**/
flag asn1SccBase_samples_BodyState_IsConstraintValid(const asn1SccBase_samples_BodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE		1861  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_TIME_2		1658  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_2		1763  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1857  /**/
#define asn1SccBase_samples_BodyState_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_Encode(const asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE		1862  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_TIME_2		1659  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_POSE_2		1764  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1858  /**/
flag asn1SccBase_samples_BodyState_Decode(asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;
} asn1SccBase_samples_IMUSensors;

flag asn1SccBase_samples_IMUSensors_Equal(const asn1SccBase_samples_IMUSensors* pVal1, const asn1SccBase_samples_IMUSensors* pVal2);

void asn1SccBase_samples_IMUSensors_Initialize(asn1SccBase_samples_IMUSensors* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1867  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1888  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1899  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		1916  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		1927  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		1944  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA		1955  /**/
flag asn1SccBase_samples_IMUSensors_IsConstraintValid(const asn1SccBase_samples_IMUSensors* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS		1972  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1884  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1912  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		1940  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_2		1968  /**/
#define asn1SccBase_samples_IMUSensors_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_Encode(const asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS		1973  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1885  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1913  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		1941  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_2		1969  /**/
flag asn1SccBase_samples_IMUSensors_Decode(asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;
} asn1SccBase_samples_Motion2D;

flag asn1SccBase_samples_Motion2D_Equal(const asn1SccBase_samples_Motion2D* pVal1, const asn1SccBase_samples_Motion2D* pVal2);

void asn1SccBase_samples_Motion2D_Initialize(asn1SccBase_samples_Motion2D* pVal);

#define ERR_BASE_SAMPLES_MOTION2D_TRANSLATION		1978  /**/
#define ERR_BASE_SAMPLES_MOTION2D_ROTATION		1989  /**/
#define ERR_BASE_SAMPLES_MOTION2D_HEADING_RAD		2000  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2021  /**/
flag asn1SccBase_samples_Motion2D_IsConstraintValid(const asn1SccBase_samples_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D		2042  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		1985  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_ROTATION_2		1996  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_HEADING_2		2017  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TIME_2		2038  /**/
#define asn1SccBase_samples_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_samples_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_samples_Motion2D_Encode(const asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D		2043  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		1986  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_ROTATION_2		1997  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_HEADING_2		2018  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TIME_2		2039  /**/
flag asn1SccBase_samples_Motion2D_Decode(asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float pascal;
    asn1SccBase_Time time;
} asn1SccBase_samples_Pressure;

flag asn1SccBase_samples_Pressure_Equal(const asn1SccBase_samples_Pressure* pVal1, const asn1SccBase_samples_Pressure* pVal2);

void asn1SccBase_samples_Pressure_Initialize(asn1SccBase_samples_Pressure* pVal);

#define ERR_BASE_SAMPLES_PRESSURE_PASCAL		2048  /**/
#define ERR_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2059  /**/
flag asn1SccBase_samples_Pressure_IsConstraintValid(const asn1SccBase_samples_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE		2080  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2055  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_TIME_2		2076  /**/
#define asn1SccBase_samples_Pressure_REQUIRED_BYTES_FOR_ENCODING       21 
#define asn1SccBase_samples_Pressure_REQUIRED_BITS_FOR_ENCODING        168

flag asn1SccBase_samples_Pressure_Encode(const asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE		2081  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2056  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_TIME_2		2077  /**/
flag asn1SccBase_samples_Pressure_Decode(asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;
} asn1SccBase_samples_RigidBodyAcceleration;

flag asn1SccBase_samples_RigidBodyAcceleration_Equal(const asn1SccBase_samples_RigidBodyAcceleration* pVal1, const asn1SccBase_samples_RigidBodyAcceleration* pVal2);

void asn1SccBase_samples_RigidBodyAcceleration_Initialize(asn1SccBase_samples_RigidBodyAcceleration* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2086  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2107  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2118  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2135  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2146  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2163  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2174  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2191  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2202  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2219  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2103  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2131  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2159  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2187  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2215  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_Encode(const asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2220  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2104  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2132  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2160  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2188  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2216  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_Decode(asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrench;

flag asn1SccBase_samples_Wrench_Equal(const asn1SccBase_samples_Wrench* pVal1, const asn1SccBase_samples_Wrench* pVal2);

void asn1SccBase_samples_Wrench_Initialize(asn1SccBase_samples_Wrench* pVal);

#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2225  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA		2236  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2253  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA		2264  /**/
#define ERR_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2281  /**/
flag asn1SccBase_samples_Wrench_IsConstraintValid(const asn1SccBase_samples_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH		2302  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_FORCE_2		2249  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_2		2277  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TIME_2		2298  /**/
#define asn1SccBase_samples_Wrench_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_Encode(const asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH		2303  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_FORCE_2		2250  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TORQUE_2		2278  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TIME_2		2299  /**/
flag asn1SccBase_samples_Wrench_Decode(asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DistanceImage_data;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
    asn1SccT_Float scale_x;
    asn1SccT_Float scale_y;
    asn1SccT_Float center_x;
    asn1SccT_Float center_y;
    asn1SccBase_samples_DistanceImage_data data;
} asn1SccBase_samples_DistanceImage;

flag asn1SccBase_samples_DistanceImage_data_Equal(const asn1SccBase_samples_DistanceImage_data* pVal1, const asn1SccBase_samples_DistanceImage_data* pVal2);

flag asn1SccBase_samples_DistanceImage_Equal(const asn1SccBase_samples_DistanceImage* pVal1, const asn1SccBase_samples_DistanceImage* pVal2);

void asn1SccBase_samples_DistanceImage_data_Initialize(asn1SccBase_samples_DistanceImage_data* pVal);
void asn1SccBase_samples_DistanceImage_Initialize(asn1SccBase_samples_DistanceImage* pVal);

#define ERR_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3344  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3365  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3376  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3387  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3398  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3409  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3420  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3431  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA		3442  /**/
flag asn1SccBase_samples_DistanceImage_IsConstraintValid(const asn1SccBase_samples_DistanceImage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE		3449  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3361  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3372  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3383  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3394  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3405  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3416  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3427  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3443  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3438  /**/
#define asn1SccBase_samples_DistanceImage_REQUIRED_BYTES_FOR_ENCODING       2665 
#define asn1SccBase_samples_DistanceImage_REQUIRED_BITS_FOR_ENCODING        21320

flag asn1SccBase_samples_DistanceImage_Encode(const asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE		3450  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3362  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3373  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3384  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3395  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3406  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3417  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3428  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3444  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3439  /**/
flag asn1SccBase_samples_DistanceImage_Decode(asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_points;

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_points points;
    asn1SccBase_samples_Pointcloud_colors colors;
} asn1SccBase_samples_Pointcloud;

flag asn1SccBase_samples_Pointcloud_points_Equal(const asn1SccBase_samples_Pointcloud_points* pVal1, const asn1SccBase_samples_Pointcloud_points* pVal2);

flag asn1SccBase_samples_Pointcloud_colors_Equal(const asn1SccBase_samples_Pointcloud_colors* pVal1, const asn1SccBase_samples_Pointcloud_colors* pVal2);

flag asn1SccBase_samples_Pointcloud_Equal(const asn1SccBase_samples_Pointcloud* pVal1, const asn1SccBase_samples_Pointcloud* pVal2);

void asn1SccBase_samples_Pointcloud_points_Initialize(asn1SccBase_samples_Pointcloud_points* pVal);
void asn1SccBase_samples_Pointcloud_colors_Initialize(asn1SccBase_samples_Pointcloud_colors* pVal);
void asn1SccBase_samples_Pointcloud_Initialize(asn1SccBase_samples_Pointcloud* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3694  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3715  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3726  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS		3743  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3750  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3761  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS		3778  /**/
flag asn1SccBase_samples_Pointcloud_IsConstraintValid(const asn1SccBase_samples_Pointcloud* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD		3785  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3711  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS		3744  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3739  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS		3779  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3774  /**/
#define asn1SccBase_samples_Pointcloud_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_Encode(const asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD		3786  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3712  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS		3745  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3740  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS		3780  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3775  /**/
flag asn1SccBase_samples_Pointcloud_Decode(asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;
} asn1SccBase_commands_LinearAngular6DCommand_m;

flag asn1SccBase_commands_LinearAngular6DCommand_m_Equal(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal1, const asn1SccBase_commands_LinearAngular6DCommand_m* pVal2);

void asn1SccBase_commands_LinearAngular6DCommand_m_Initialize(asn1SccBase_commands_LinearAngular6DCommand_m* pVal);

#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6381  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6402  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6413  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6430  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6441  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_IsConstraintValid(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6458  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6398  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6426  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6454  /**/
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_commands_LinearAngular6DCommand_m_Encode(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6459  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6399  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6427  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6455  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_Decode(asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance_m pose;
    asn1SccBase_TwistWithCovariance_m velocity;
} asn1SccBase_samples_BodyState_m;

flag asn1SccBase_samples_BodyState_m_Equal(const asn1SccBase_samples_BodyState_m* pVal1, const asn1SccBase_samples_BodyState_m* pVal2);

void asn1SccBase_samples_BodyState_m_Initialize(asn1SccBase_samples_BodyState_m* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6464  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6485  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6496  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6513  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6524  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6531  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6552  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6563  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6590  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6601  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6618  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6629  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6646  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6657  /**/
flag asn1SccBase_samples_BodyState_m_IsConstraintValid(const asn1SccBase_samples_BodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M		6684  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6481  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6586  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6680  /**/
#define asn1SccBase_samples_BodyState_m_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_m_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_m_Encode(const asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M		6685  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6482  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6587  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6681  /**/
flag asn1SccBase_samples_BodyState_m_Decode(asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;
} asn1SccBase_samples_IMUSensors_m;

flag asn1SccBase_samples_IMUSensors_m_Equal(const asn1SccBase_samples_IMUSensors_m* pVal1, const asn1SccBase_samples_IMUSensors_m* pVal2);

void asn1SccBase_samples_IMUSensors_m_Initialize(asn1SccBase_samples_IMUSensors_m* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6690  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6711  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6722  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6739  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6750  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6767  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6778  /**/
flag asn1SccBase_samples_IMUSensors_m_IsConstraintValid(const asn1SccBase_samples_IMUSensors_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M		6795  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6707  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6735  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6763  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6791  /**/
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_m_Encode(const asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M		6796  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6708  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6736  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6764  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6792  /**/
flag asn1SccBase_samples_IMUSensors_m_Decode(asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;
} asn1SccBase_samples_RigidBodyAcceleration_m;

flag asn1SccBase_samples_RigidBodyAcceleration_m_Equal(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal1, const asn1SccBase_samples_RigidBodyAcceleration_m* pVal2);

void asn1SccBase_samples_RigidBodyAcceleration_m_Initialize(asn1SccBase_samples_RigidBodyAcceleration_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6801  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6822  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		6833  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		6850  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		6861  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		6878  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		6889  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		6906  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		6917  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6934  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6818  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6846  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6874  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6902  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		6930  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_m_Encode(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6935  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6819  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6847  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6875  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6903  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		6931  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_Decode(asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrench_m;

flag asn1SccBase_samples_Wrench_m_Equal(const asn1SccBase_samples_Wrench_m* pVal1, const asn1SccBase_samples_Wrench_m* pVal2);

void asn1SccBase_samples_Wrench_m_Initialize(asn1SccBase_samples_Wrench_m* pVal);

#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7224  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7235  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7252  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7263  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7280  /**/
flag asn1SccBase_samples_Wrench_m_IsConstraintValid(const asn1SccBase_samples_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M		7301  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7248  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7276  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TIME_2		7297  /**/
#define asn1SccBase_samples_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_m_Encode(const asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M		7302  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7249  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7277  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TIME_2		7298  /**/
flag asn1SccBase_samples_Wrench_m_Decode(asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_m_points;

typedef struct {    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_m_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_m_points points;
    asn1SccBase_samples_Pointcloud_m_colors colors;
} asn1SccBase_samples_Pointcloud_m;

flag asn1SccBase_samples_Pointcloud_m_points_Equal(const asn1SccBase_samples_Pointcloud_m_points* pVal1, const asn1SccBase_samples_Pointcloud_m_points* pVal2);

flag asn1SccBase_samples_Pointcloud_m_colors_Equal(const asn1SccBase_samples_Pointcloud_m_colors* pVal1, const asn1SccBase_samples_Pointcloud_m_colors* pVal2);

flag asn1SccBase_samples_Pointcloud_m_Equal(const asn1SccBase_samples_Pointcloud_m* pVal1, const asn1SccBase_samples_Pointcloud_m* pVal2);

void asn1SccBase_samples_Pointcloud_m_points_Initialize(asn1SccBase_samples_Pointcloud_m_points* pVal);
void asn1SccBase_samples_Pointcloud_m_colors_Initialize(asn1SccBase_samples_Pointcloud_m_colors* pVal);
void asn1SccBase_samples_Pointcloud_m_Initialize(asn1SccBase_samples_Pointcloud_m* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7598  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7619  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7630  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS		7647  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7654  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7665  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS		7682  /**/
flag asn1SccBase_samples_Pointcloud_m_IsConstraintValid(const asn1SccBase_samples_Pointcloud_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M		7689  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7615  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7648  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7643  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7683  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7678  /**/
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_m_Encode(const asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M		7690  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7616  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7649  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7644  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7684  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7679  /**/
flag asn1SccBase_samples_Pointcloud_m_Decode(asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[200];
} asn1SccT_String;

flag asn1SccT_String_Equal(const asn1SccT_String* pVal1, const asn1SccT_String* pVal2);

void asn1SccT_String_Initialize(asn1SccT_String* pVal);

#define ERR_T_STRING		8052  /**/
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		8053  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       201 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        1608

flag asn1SccT_String_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		8054  /**/
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointLimits_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_JointLimits_elements;

typedef struct {
    asn1SccBase_JointLimits_names names;
    asn1SccBase_JointLimits_elements elements;
} asn1SccBase_JointLimits;

flag asn1SccBase_JointLimits_names_Equal(const asn1SccBase_JointLimits_names* pVal1, const asn1SccBase_JointLimits_names* pVal2);

flag asn1SccBase_JointLimits_elements_Equal(const asn1SccBase_JointLimits_elements* pVal1, const asn1SccBase_JointLimits_elements* pVal2);

flag asn1SccBase_JointLimits_Equal(const asn1SccBase_JointLimits* pVal1, const asn1SccBase_JointLimits* pVal2);

void asn1SccBase_JointLimits_names_Initialize(asn1SccBase_JointLimits_names* pVal);
void asn1SccBase_JointLimits_elements_Initialize(asn1SccBase_JointLimits_elements* pVal);
void asn1SccBase_JointLimits_Initialize(asn1SccBase_JointLimits* pVal);

#define ERR_BASE_JOINTLIMITS_NAMES_ELM		2336  /**/
#define ERR_BASE_JOINTLIMITS_NAMES		2347  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2354  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2365  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2376  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2387  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2398  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2419  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2430  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2441  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2452  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2463  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS		2494  /**/
flag asn1SccBase_JointLimits_IsConstraintValid(const asn1SccBase_JointLimits* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITS		2501  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES		2348  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES_ELM_2		2343  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS		2495  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2490  /**/
#define asn1SccBase_JointLimits_REQUIRED_BYTES_FOR_ENCODING       66202 
#define asn1SccBase_JointLimits_REQUIRED_BITS_FOR_ENCODING        529616

flag asn1SccBase_JointLimits_Encode(const asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITS		2502  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES		2349  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES_ELM_2		2344  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS		2496  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2491  /**/
flag asn1SccBase_JointLimits_Decode(asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;
} asn1SccBase_JointTransform;

flag asn1SccBase_JointTransform_Equal(const asn1SccBase_JointTransform* pVal1, const asn1SccBase_JointTransform* pVal2);

void asn1SccBase_JointTransform_Initialize(asn1SccBase_JointTransform* pVal);

#define ERR_BASE_JOINTTRANSFORM_SOURCEFRAME		2507  /**/
#define ERR_BASE_JOINTTRANSFORM_TARGETFRAME		2518  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2529  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2540  /**/
flag asn1SccBase_JointTransform_IsConstraintValid(const asn1SccBase_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM		2557  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2514  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2525  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2553  /**/
#define asn1SccBase_JointTransform_REQUIRED_BYTES_FOR_ENCODING       442 
#define asn1SccBase_JointTransform_REQUIRED_BITS_FOR_ENCODING        3530

flag asn1SccBase_JointTransform_Encode(const asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM		2558  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2515  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2526  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2554  /**/
flag asn1SccBase_JointTransform_Decode(asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_JointTransformVector_elements;

typedef struct {
    asn1SccBase_JointTransformVector_names names;
    asn1SccBase_JointTransformVector_elements elements;
} asn1SccBase_JointTransformVector;

flag asn1SccBase_JointTransformVector_names_Equal(const asn1SccBase_JointTransformVector_names* pVal1, const asn1SccBase_JointTransformVector_names* pVal2);

flag asn1SccBase_JointTransformVector_elements_Equal(const asn1SccBase_JointTransformVector_elements* pVal1, const asn1SccBase_JointTransformVector_elements* pVal2);

flag asn1SccBase_JointTransformVector_Equal(const asn1SccBase_JointTransformVector* pVal1, const asn1SccBase_JointTransformVector* pVal2);

void asn1SccBase_JointTransformVector_names_Initialize(asn1SccBase_JointTransformVector_names* pVal);
void asn1SccBase_JointTransformVector_elements_Initialize(asn1SccBase_JointTransformVector_elements* pVal);
void asn1SccBase_JointTransformVector_Initialize(asn1SccBase_JointTransformVector* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4751  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES		4762  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4769  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4780  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4791  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4802  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4829  /**/
flag asn1SccBase_JointTransformVector_IsConstraintValid(const asn1SccBase_JointTransformVector* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR		4836  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4763  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4758  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4830  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4825  /**/
#define asn1SccBase_JointTransformVector_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_JointTransformVector_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_JointTransformVector_Encode(const asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR		4837  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4764  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4759  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4831  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4826  /**/
flag asn1SccBase_JointTransformVector_Decode(asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTransform_names names;
    asn1SccBase_NamedVector_Base_JointTransform_elements elements;
} asn1SccBase_NamedVector_Base_JointTransform;

flag asn1SccBase_NamedVector_Base_JointTransform_names_Equal(const asn1SccBase_NamedVector_Base_JointTransform_names* pVal1, const asn1SccBase_NamedVector_Base_JointTransform_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointTransform_elements_Equal(const asn1SccBase_NamedVector_Base_JointTransform_elements* pVal1, const asn1SccBase_NamedVector_Base_JointTransform_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointTransform_Equal(const asn1SccBase_NamedVector_Base_JointTransform* pVal1, const asn1SccBase_NamedVector_Base_JointTransform* pVal2);

void asn1SccBase_NamedVector_Base_JointTransform_names_Initialize(asn1SccBase_NamedVector_Base_JointTransform_names* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_elements_Initialize(asn1SccBase_NamedVector_Base_JointTransform_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_Initialize(asn1SccBase_NamedVector_Base_JointTransform* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4842  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4853  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4860  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		4871  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4882  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		4893  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4920  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4927  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4854  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4849  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4921  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		4916  /**/
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_NamedVector_Base_JointTransform_Encode(const asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4928  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4855  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4850  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4922  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		4917  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_Decode(asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointsTrajectory_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_JointsTrajectory_elements;

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_JointsTrajectory_times_val;

typedef struct {
    asn1SccBase_JointsTrajectory_names names;
    asn1SccBase_JointsTrajectory_elements elements;
    asn1SccBase_JointsTrajectory_times_val times_val;
} asn1SccBase_JointsTrajectory;

flag asn1SccBase_JointsTrajectory_names_Equal(const asn1SccBase_JointsTrajectory_names* pVal1, const asn1SccBase_JointsTrajectory_names* pVal2);

flag asn1SccBase_JointsTrajectory_elements_Equal(const asn1SccBase_JointsTrajectory_elements* pVal1, const asn1SccBase_JointsTrajectory_elements* pVal2);

flag asn1SccBase_JointsTrajectory_times_val_Equal(const asn1SccBase_JointsTrajectory_times_val* pVal1, const asn1SccBase_JointsTrajectory_times_val* pVal2);

flag asn1SccBase_JointsTrajectory_Equal(const asn1SccBase_JointsTrajectory* pVal1, const asn1SccBase_JointsTrajectory* pVal2);

void asn1SccBase_JointsTrajectory_names_Initialize(asn1SccBase_JointsTrajectory_names* pVal);
void asn1SccBase_JointsTrajectory_elements_Initialize(asn1SccBase_JointsTrajectory_elements* pVal);
void asn1SccBase_JointsTrajectory_times_val_Initialize(asn1SccBase_JointsTrajectory_times_val* pVal);
void asn1SccBase_JointsTrajectory_Initialize(asn1SccBase_JointsTrajectory* pVal);

#define ERR_BASE_JOINTSTRAJECTORY_NAMES_ELM		2563  /**/
#define ERR_BASE_JOINTSTRAJECTORY_NAMES		2574  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2581  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2592  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2603  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2614  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2625  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2646  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS		2657  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2664  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL		2685  /**/
flag asn1SccBase_JointsTrajectory_IsConstraintValid(const asn1SccBase_JointsTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY		2692  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES		2575  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2570  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2658  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2653  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2686  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2681  /**/
#define asn1SccBase_JointsTrajectory_REQUIRED_BYTES_FOR_ENCODING       2642003 
#define asn1SccBase_JointsTrajectory_REQUIRED_BITS_FOR_ENCODING        21136024

flag asn1SccBase_JointsTrajectory_Encode(const asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY		2693  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES		2576  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2571  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2659  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2654  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2687  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2682  /**/
flag asn1SccBase_JointsTrajectory_Decode(asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointLimitRange_names names;
    asn1SccBase_NamedVector_Base_JointLimitRange_elements elements;
} asn1SccBase_NamedVector_Base_JointLimitRange;

flag asn1SccBase_NamedVector_Base_JointLimitRange_names_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointLimitRange_elements_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointLimitRange_Equal(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal1, const asn1SccBase_NamedVector_Base_JointLimitRange* pVal2);

void asn1SccBase_NamedVector_Base_JointLimitRange_names_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_elements_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2698  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2709  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2716  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2727  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2738  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2749  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2760  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2781  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2792  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2803  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2814  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2825  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2856  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2863  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2710  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2705  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2857  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2852  /**/
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       66202 
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        529616

flag asn1SccBase_NamedVector_Base_JointLimitRange_Encode(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2864  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2711  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2706  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2858  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2853  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_Decode(asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointState_names;

typedef struct {
    asn1SccBase_NamedVector_Base_JointState_names names;
    asn1SccBase_JointTrajectory elements;
} asn1SccBase_NamedVector_Base_JointState;

flag asn1SccBase_NamedVector_Base_JointState_names_Equal(const asn1SccBase_NamedVector_Base_JointState_names* pVal1, const asn1SccBase_NamedVector_Base_JointState_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointState_Equal(const asn1SccBase_NamedVector_Base_JointState* pVal1, const asn1SccBase_NamedVector_Base_JointState* pVal2);

void asn1SccBase_NamedVector_Base_JointState_names_Initialize(asn1SccBase_NamedVector_Base_JointState_names* pVal);
void asn1SccBase_NamedVector_Base_JointState_Initialize(asn1SccBase_NamedVector_Base_JointState* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2869  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2880  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2887  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2898  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		2909  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		2920  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		2931  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		2952  /**/
flag asn1SccBase_NamedVector_Base_JointState_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2963  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2881  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2876  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		2959  /**/
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BYTES_FOR_ENCODING       53202 
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BITS_FOR_ENCODING        425616

flag asn1SccBase_NamedVector_Base_JointState_Encode(const asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2964  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2882  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2877  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		2960  /**/
flag asn1SccBase_NamedVector_Base_JointState_Decode(asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_Wrench_names;

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_NamedVector_Base_Wrench_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_Wrench_names names;
    asn1SccBase_NamedVector_Base_Wrench_elements elements;
} asn1SccBase_NamedVector_Base_Wrench;

flag asn1SccBase_NamedVector_Base_Wrench_names_Equal(const asn1SccBase_NamedVector_Base_Wrench_names* pVal1, const asn1SccBase_NamedVector_Base_Wrench_names* pVal2);

flag asn1SccBase_NamedVector_Base_Wrench_elements_Equal(const asn1SccBase_NamedVector_Base_Wrench_elements* pVal1, const asn1SccBase_NamedVector_Base_Wrench_elements* pVal2);

flag asn1SccBase_NamedVector_Base_Wrench_Equal(const asn1SccBase_NamedVector_Base_Wrench* pVal1, const asn1SccBase_NamedVector_Base_Wrench* pVal2);

void asn1SccBase_NamedVector_Base_Wrench_names_Initialize(asn1SccBase_NamedVector_Base_Wrench_names* pVal);
void asn1SccBase_NamedVector_Base_Wrench_elements_Initialize(asn1SccBase_NamedVector_Base_Wrench_elements* pVal);
void asn1SccBase_NamedVector_Base_Wrench_Initialize(asn1SccBase_NamedVector_Base_Wrench* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		2969  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2980  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		2987  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		2998  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3015  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3026  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3053  /**/
flag asn1SccBase_NamedVector_Base_Wrench_IsConstraintValid(const asn1SccBase_NamedVector_Base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH		3060  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2981  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		2976  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3054  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3049  /**/
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BYTES_FOR_ENCODING       55902 
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BITS_FOR_ENCODING        447216

flag asn1SccBase_NamedVector_Base_Wrench_Encode(const asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH		3061  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2982  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		2977  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3055  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3050  /**/
flag asn1SccBase_NamedVector_Base_Wrench_Decode(asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_names;

typedef struct {    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTrajectory_names names;
    asn1SccBase_NamedVector_Base_JointTrajectory_elements elements;
} asn1SccBase_NamedVector_Base_JointTrajectory;

flag asn1SccBase_NamedVector_Base_JointTrajectory_names_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal2);

flag asn1SccBase_NamedVector_Base_JointTrajectory_elements_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal2);

flag asn1SccBase_NamedVector_Base_JointTrajectory_Equal(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal1, const asn1SccBase_NamedVector_Base_JointTrajectory* pVal2);

void asn1SccBase_NamedVector_Base_JointTrajectory_names_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_elements_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3066  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3077  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3084  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3095  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3106  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3117  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3128  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3149  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3160  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3167  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3078  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3073  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3161  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3156  /**/
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       2640402 
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        21123216

flag asn1SccBase_NamedVector_Base_JointTrajectory_Encode(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3168  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3079  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3074  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3162  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3157  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_Decode(asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_commands_Joints_names;

typedef struct {
    asn1SccBase_commands_Joints_names names;
    asn1SccBase_JointTrajectory elements;
    asn1SccBase_Time time;
} asn1SccBase_commands_Joints;

flag asn1SccBase_commands_Joints_names_Equal(const asn1SccBase_commands_Joints_names* pVal1, const asn1SccBase_commands_Joints_names* pVal2);

flag asn1SccBase_commands_Joints_Equal(const asn1SccBase_commands_Joints* pVal1, const asn1SccBase_commands_Joints* pVal2);

void asn1SccBase_commands_Joints_names_Initialize(asn1SccBase_commands_Joints_names* pVal);
void asn1SccBase_commands_Joints_Initialize(asn1SccBase_commands_Joints* pVal);

#define ERR_BASE_COMMANDS_JOINTS_NAMES_ELM		3455  /**/
#define ERR_BASE_COMMANDS_JOINTS_NAMES		3466  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3473  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3484  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3495  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3506  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3517  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS		3538  /**/
#define ERR_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3549  /**/
flag asn1SccBase_commands_Joints_IsConstraintValid(const asn1SccBase_commands_Joints* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS		3570  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES		3467  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3462  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3545  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_TIME_2		3566  /**/
#define asn1SccBase_commands_Joints_REQUIRED_BYTES_FOR_ENCODING       53210 
#define asn1SccBase_commands_Joints_REQUIRED_BITS_FOR_ENCODING        425680

flag asn1SccBase_commands_Joints_Encode(const asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS		3571  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES		3468  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3463  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3546  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_TIME_2		3567  /**/
flag asn1SccBase_commands_Joints_Decode(asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;
} asn1SccBase_samples_RigidBodyState;

flag asn1SccBase_samples_RigidBodyState_Equal(const asn1SccBase_samples_RigidBodyState* pVal1, const asn1SccBase_samples_RigidBodyState* pVal2);

void asn1SccBase_samples_RigidBodyState_Initialize(asn1SccBase_samples_RigidBodyState* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3791  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3812  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3823  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3834  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3845  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3862  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3873  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		3890  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		3901  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		3908  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		3929  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		3940  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		3957  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		3968  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		3985  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		3996  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4013  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4024  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4041  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4052  /**/
flag asn1SccBase_samples_RigidBodyState_IsConstraintValid(const asn1SccBase_samples_RigidBodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE		4069  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3808  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3819  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3830  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3858  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3886  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		3925  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		3953  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		3981  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4009  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4037  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4065  /**/
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BYTES_FOR_ENCODING       1050 
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BITS_FOR_ENCODING        8400

flag asn1SccBase_samples_RigidBodyState_Encode(const asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE		4070  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3809  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3820  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3831  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3859  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3887  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		3926  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		3954  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		3982  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4010  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4038  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4066  /**/
flag asn1SccBase_samples_RigidBodyState_Decode(asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_names;

typedef struct {    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_samples_Wrenches_elements;

typedef struct {
    asn1SccBase_samples_Wrenches_names names;
    asn1SccBase_samples_Wrenches_elements elements;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrenches;

flag asn1SccBase_samples_Wrenches_names_Equal(const asn1SccBase_samples_Wrenches_names* pVal1, const asn1SccBase_samples_Wrenches_names* pVal2);

flag asn1SccBase_samples_Wrenches_elements_Equal(const asn1SccBase_samples_Wrenches_elements* pVal1, const asn1SccBase_samples_Wrenches_elements* pVal2);

flag asn1SccBase_samples_Wrenches_Equal(const asn1SccBase_samples_Wrenches* pVal1, const asn1SccBase_samples_Wrenches* pVal2);

void asn1SccBase_samples_Wrenches_names_Initialize(asn1SccBase_samples_Wrenches_names* pVal);
void asn1SccBase_samples_Wrenches_elements_Initialize(asn1SccBase_samples_Wrenches_elements* pVal);
void asn1SccBase_samples_Wrenches_Initialize(asn1SccBase_samples_Wrenches* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_NAMES_ELM		4605  /**/
#define ERR_BASE_SAMPLES_WRENCHES_NAMES		4616  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4623  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4634  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4651  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4662  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS		4689  /**/
#define ERR_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4696  /**/
flag asn1SccBase_samples_Wrenches_IsConstraintValid(const asn1SccBase_samples_Wrenches* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES		4717  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES		4617  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4612  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4690  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4685  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_TIME_2		4713  /**/
#define asn1SccBase_samples_Wrenches_REQUIRED_BYTES_FOR_ENCODING       55910 
#define asn1SccBase_samples_Wrenches_REQUIRED_BITS_FOR_ENCODING        447280

flag asn1SccBase_samples_Wrenches_Encode(const asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES		4718  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES		4618  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4613  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4691  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4686  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_TIME_2		4714  /**/
flag asn1SccBase_samples_Wrenches_Decode(asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String data;
    asn1SccT_String name_val;
} asn1SccBase_samples_frame_frame_attrib_t;

flag asn1SccBase_samples_frame_frame_attrib_t_Equal(const asn1SccBase_samples_frame_frame_attrib_t* pVal1, const asn1SccBase_samples_frame_frame_attrib_t* pVal2);

void asn1SccBase_samples_frame_frame_attrib_t_Initialize(asn1SccBase_samples_frame_frame_attrib_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4723  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4734  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_attrib_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4745  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4730  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4741  /**/
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BYTES_FOR_ENCODING       402 
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BITS_FOR_ENCODING        3216

flag asn1SccBase_samples_frame_frame_attrib_t_Encode(const asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4746  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4731  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4742  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_Decode(asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;
} asn1SccBase_JointTransform_m;

flag asn1SccBase_JointTransform_m_Equal(const asn1SccBase_JointTransform_m* pVal1, const asn1SccBase_JointTransform_m* pVal2);

void asn1SccBase_JointTransform_m_Initialize(asn1SccBase_JointTransform_m* pVal);

#define ERR_BASE_JOINTTRANSFORM_M_SOURCEFRAME		5887  /**/
#define ERR_BASE_JOINTTRANSFORM_M_TARGETFRAME		5898  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		5909  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		5920  /**/
flag asn1SccBase_JointTransform_m_IsConstraintValid(const asn1SccBase_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M		5937  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5894  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5905  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		5933  /**/
#define asn1SccBase_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       442 
#define asn1SccBase_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        3530

flag asn1SccBase_JointTransform_m_Encode(const asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M		5938  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5895  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5906  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		5934  /**/
flag asn1SccBase_JointTransform_m_Decode(asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_JointTransform_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		158  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		169  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		180  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		191  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		218  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		219  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		214  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       88251 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BITS_FOR_ENCODING        706008

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		220  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		215  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_m_names;

typedef struct {
    asn1SccBase_JointTransformVector_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;
} asn1SccBase_JointTransformVector_m;

flag asn1SccBase_JointTransformVector_m_names_Equal(const asn1SccBase_JointTransformVector_m_names* pVal1, const asn1SccBase_JointTransformVector_m_names* pVal2);

flag asn1SccBase_JointTransformVector_m_Equal(const asn1SccBase_JointTransformVector_m* pVal1, const asn1SccBase_JointTransformVector_m* pVal2);

void asn1SccBase_JointTransformVector_m_names_Initialize(asn1SccBase_JointTransformVector_m_names* pVal);
void asn1SccBase_JointTransformVector_m_Initialize(asn1SccBase_JointTransformVector_m* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7307  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7318  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7325  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7336  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7347  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7358  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7385  /**/
flag asn1SccBase_JointTransformVector_m_IsConstraintValid(const asn1SccBase_JointTransformVector_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M		7396  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7319  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7314  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7392  /**/
#define asn1SccBase_JointTransformVector_m_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_JointTransformVector_m_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_JointTransformVector_m_Encode(const asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M		7397  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7320  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7315  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7393  /**/
flag asn1SccBase_JointTransformVector_m_Decode(asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_JointTransform_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_JointTransform_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;
} asn1SccBase_NamedVector_base_JointTransform_m;

flag asn1SccBase_NamedVector_base_JointTransform_m_names_Equal(const asn1SccBase_NamedVector_base_JointTransform_m_names* pVal1, const asn1SccBase_NamedVector_base_JointTransform_m_names* pVal2);

flag asn1SccBase_NamedVector_base_JointTransform_m_Equal(const asn1SccBase_NamedVector_base_JointTransform_m* pVal1, const asn1SccBase_NamedVector_base_JointTransform_m* pVal2);

void asn1SccBase_NamedVector_base_JointTransform_m_names_Initialize(asn1SccBase_NamedVector_base_JointTransform_m_names* pVal);
void asn1SccBase_NamedVector_base_JointTransform_m_Initialize(asn1SccBase_NamedVector_base_JointTransform_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7402  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7413  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7420  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7431  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7442  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7453  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7480  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_IsConstraintValid(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7491  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7414  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7409  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7487  /**/
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       128452 
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        1027616

flag asn1SccBase_NamedVector_base_JointTransform_m_Encode(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7492  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7415  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7410  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7488  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_Decode(asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;
} asn1SccBase_samples_RigidBodyState_m;

flag asn1SccBase_samples_RigidBodyState_m_Equal(const asn1SccBase_samples_RigidBodyState_m* pVal1, const asn1SccBase_samples_RigidBodyState_m* pVal2);

void asn1SccBase_samples_RigidBodyState_m_Initialize(asn1SccBase_samples_RigidBodyState_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		6940  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		6961  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		6972  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		6983  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		6994  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		7011  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		7022  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		7039  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		7050  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7057  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7078  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7089  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7106  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7117  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7134  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7145  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7162  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7173  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7190  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7201  /**/
flag asn1SccBase_samples_RigidBodyState_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7218  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		6957  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		6968  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		6979  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7007  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7035  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7074  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7102  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7130  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7158  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7186  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7214  /**/
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BYTES_FOR_ENCODING       1050 
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BITS_FOR_ENCODING        8400

flag asn1SccBase_samples_RigidBodyState_m_Encode(const asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7219  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		6958  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		6969  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		6980  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7008  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7036  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7075  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7103  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7131  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7159  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7187  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7215  /**/
flag asn1SccBase_samples_RigidBodyState_m_Decode(asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_Wrench_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_Wrench_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;
} asn1SccBase_NamedVector_base_Wrench_m;

flag asn1SccBase_NamedVector_base_Wrench_m_names_Equal(const asn1SccBase_NamedVector_base_Wrench_m_names* pVal1, const asn1SccBase_NamedVector_base_Wrench_m_names* pVal2);

flag asn1SccBase_NamedVector_base_Wrench_m_Equal(const asn1SccBase_NamedVector_base_Wrench_m* pVal1, const asn1SccBase_NamedVector_base_Wrench_m* pVal2);

void asn1SccBase_NamedVector_base_Wrench_m_names_Initialize(asn1SccBase_NamedVector_base_Wrench_m_names* pVal);
void asn1SccBase_NamedVector_base_Wrench_m_Initialize(asn1SccBase_NamedVector_base_Wrench_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7497  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7508  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7515  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7526  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7543  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7554  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7581  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_IsConstraintValid(const asn1SccBase_NamedVector_base_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7592  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7509  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7504  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7588  /**/
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       55902 
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BITS_FOR_ENCODING        447216

flag asn1SccBase_NamedVector_base_Wrench_m_Encode(const asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7593  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7510  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7505  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7589  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_Decode(asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_m_names;

typedef struct {
    asn1SccBase_samples_Wrenches_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;
    asn1SccBase_Time time;
} asn1SccBase_samples_Wrenches_m;

flag asn1SccBase_samples_Wrenches_m_names_Equal(const asn1SccBase_samples_Wrenches_m_names* pVal1, const asn1SccBase_samples_Wrenches_m_names* pVal2);

flag asn1SccBase_samples_Wrenches_m_Equal(const asn1SccBase_samples_Wrenches_m* pVal1, const asn1SccBase_samples_Wrenches_m* pVal2);

void asn1SccBase_samples_Wrenches_m_names_Initialize(asn1SccBase_samples_Wrenches_m_names* pVal);
void asn1SccBase_samples_Wrenches_m_Initialize(asn1SccBase_samples_Wrenches_m* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7695  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES		7706  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7713  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7724  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7741  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7752  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7779  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7790  /**/
flag asn1SccBase_samples_Wrenches_m_IsConstraintValid(const asn1SccBase_samples_Wrenches_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M		7811  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES		7707  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7702  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7786  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7807  /**/
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BYTES_FOR_ENCODING       55910 
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BITS_FOR_ENCODING        447280

flag asn1SccBase_samples_Wrenches_m_Encode(const asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M		7812  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES		7708  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7703  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7787  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7808  /**/
flag asn1SccBase_samples_Wrenches_m_Decode(asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef char asn1SccVizkit3D_FilePath[256];

flag asn1SccVizkit3D_FilePath_Equal(const asn1SccVizkit3D_FilePath val1, const asn1SccVizkit3D_FilePath val2);

void asn1SccVizkit3D_FilePath_Initialize(asn1SccVizkit3D_FilePath val);

#define ERR_VIZKIT3D_FILEPATH		8059  /**/
flag asn1SccVizkit3D_FilePath_IsConstraintValid(const asn1SccVizkit3D_FilePath val, int* pErrCode);

#define ERR_UPER_ENCODE_VIZKIT3D_FILEPATH		8060  /**/
#define asn1SccVizkit3D_FilePath_REQUIRED_BYTES_FOR_ENCODING       225 
#define asn1SccVizkit3D_FilePath_REQUIRED_BITS_FOR_ENCODING        1793

flag asn1SccVizkit3D_FilePath_Encode(const asn1SccVizkit3D_FilePath val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_VIZKIT3D_FILEPATH		8061  /**/
flag asn1SccVizkit3D_FilePath_Decode(asn1SccVizkit3D_FilePath val, BitStream* pBitStrm, int* pErrCode);

typedef char asn1SccVizkit3D_PluginLabel[32];

flag asn1SccVizkit3D_PluginLabel_Equal(const asn1SccVizkit3D_PluginLabel val1, const asn1SccVizkit3D_PluginLabel val2);

void asn1SccVizkit3D_PluginLabel_Initialize(asn1SccVizkit3D_PluginLabel val);

#define ERR_VIZKIT3D_PLUGINLABEL		8066  /**/
flag asn1SccVizkit3D_PluginLabel_IsConstraintValid(const asn1SccVizkit3D_PluginLabel val, int* pErrCode);

#define ERR_UPER_ENCODE_VIZKIT3D_PLUGINLABEL		8067  /**/
#define asn1SccVizkit3D_PluginLabel_REQUIRED_BYTES_FOR_ENCODING       28 
#define asn1SccVizkit3D_PluginLabel_REQUIRED_BITS_FOR_ENCODING        222

flag asn1SccVizkit3D_PluginLabel_Encode(const asn1SccVizkit3D_PluginLabel val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_VIZKIT3D_PLUGINLABEL		8068  /**/
flag asn1SccVizkit3D_PluginLabel_Decode(asn1SccVizkit3D_PluginLabel val, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		8073  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		8074  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		8075  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_MatrixXd_data;

typedef struct {
    asn1SccT_Int32 rows;
    asn1SccT_Int32 cols;
    asn1SccWrappers_MatrixXd_data data;
} asn1SccWrappers_MatrixXd;

flag asn1SccWrappers_MatrixXd_data_Equal(const asn1SccWrappers_MatrixXd_data* pVal1, const asn1SccWrappers_MatrixXd_data* pVal2);

flag asn1SccWrappers_MatrixXd_Equal(const asn1SccWrappers_MatrixXd* pVal1, const asn1SccWrappers_MatrixXd* pVal2);

void asn1SccWrappers_MatrixXd_data_Initialize(asn1SccWrappers_MatrixXd_data* pVal);
void asn1SccWrappers_MatrixXd_Initialize(asn1SccWrappers_MatrixXd* pVal);

#define ERR_WRAPPERS_MATRIXXD_ROWS		5782  /**/
#define ERR_WRAPPERS_MATRIXXD_COLS		5793  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA_ELM		5804  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA		5815  /**/
flag asn1SccWrappers_MatrixXd_IsConstraintValid(const asn1SccWrappers_MatrixXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD		5822  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_ROWS_2		5789  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_COLS_2		5800  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA		5816  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5811  /**/
#define asn1SccWrappers_MatrixXd_REQUIRED_BYTES_FOR_ENCODING       2609 
#define asn1SccWrappers_MatrixXd_REQUIRED_BITS_FOR_ENCODING        20872

flag asn1SccWrappers_MatrixXd_Encode(const asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD		5823  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_ROWS_2		5790  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_COLS_2		5801  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA		5817  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5812  /**/
flag asn1SccWrappers_MatrixXd_Decode(asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_knots;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_vertices;

typedef struct {
    asn1SccT_Double geometric_resolution;
    asn1SccT_Int32 dimension;
    asn1SccT_Int32 curve_order;
    asn1SccWrappers_geometry_SplineType kind;
    asn1SccWrappers_geometry_Spline_knots knots;
    asn1SccWrappers_geometry_Spline_vertices vertices;
} asn1SccWrappers_geometry_Spline;

flag asn1SccWrappers_geometry_Spline_knots_Equal(const asn1SccWrappers_geometry_Spline_knots* pVal1, const asn1SccWrappers_geometry_Spline_knots* pVal2);

flag asn1SccWrappers_geometry_Spline_vertices_Equal(const asn1SccWrappers_geometry_Spline_vertices* pVal1, const asn1SccWrappers_geometry_Spline_vertices* pVal2);

flag asn1SccWrappers_geometry_Spline_Equal(const asn1SccWrappers_geometry_Spline* pVal1, const asn1SccWrappers_geometry_Spline* pVal2);

void asn1SccWrappers_geometry_Spline_knots_Initialize(asn1SccWrappers_geometry_Spline_knots* pVal);
void asn1SccWrappers_geometry_Spline_vertices_Initialize(asn1SccWrappers_geometry_Spline_vertices* pVal);
void asn1SccWrappers_geometry_Spline_Initialize(asn1SccWrappers_geometry_Spline* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		7817  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		7828  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		7839  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KIND		7850  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		7861  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7872  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		7879  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7890  /**/
flag asn1SccWrappers_geometry_Spline_IsConstraintValid(const asn1SccWrappers_geometry_Spline* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE		7897  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7824  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7835  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7846  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7857  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7873  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7868  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7891  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7886  /**/
#define asn1SccWrappers_geometry_Spline_REQUIRED_BYTES_FOR_ENCODING       5224 
#define asn1SccWrappers_geometry_Spline_REQUIRED_BITS_FOR_ENCODING        41787

flag asn1SccWrappers_geometry_Spline_Encode(const asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE		7898  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7825  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7836  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7847  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7858  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7874  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7869  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7892  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7887  /**/
flag asn1SccWrappers_geometry_Spline_Decode(asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;
} asn1SccBase_Trajectory;

flag asn1SccBase_Trajectory_Equal(const asn1SccBase_Trajectory* pVal1, const asn1SccBase_Trajectory* pVal2);

void asn1SccBase_Trajectory_Initialize(asn1SccBase_Trajectory* pVal);

#define ERR_BASE_TRAJECTORY_SPEED		1057  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1068  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_DIMENSION		1079  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1090  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KIND		1101  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1112  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS		1123  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1130  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES		1141  /**/
flag asn1SccBase_Trajectory_IsConstraintValid(const asn1SccBase_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY		1158  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPEED_2		1064  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPLINE_2		1154  /**/
#define asn1SccBase_Trajectory_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_Encode(const asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY		1159  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPEED_2		1065  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPLINE_2		1155  /**/
flag asn1SccBase_Trajectory_Decode(asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;
} asn1SccBase_Trajectory_m;

flag asn1SccBase_Trajectory_m_Equal(const asn1SccBase_Trajectory_m* pVal1, const asn1SccBase_Trajectory_m* pVal2);

void asn1SccBase_Trajectory_m_Initialize(asn1SccBase_Trajectory_m* pVal);

#define ERR_BASE_TRAJECTORY_M_SPEED		7903  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		7914  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_DIMENSION		7925  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		7936  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KIND		7947  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		7958  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS		7969  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		7976  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES		7987  /**/
flag asn1SccBase_Trajectory_m_IsConstraintValid(const asn1SccBase_Trajectory_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M		8004  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPEED_2		7910  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPLINE_2		8000  /**/
#define asn1SccBase_Trajectory_m_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_m_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_m_Encode(const asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY_M		8005  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPEED_2		7911  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPLINE_2		8001  /**/
flag asn1SccBase_Trajectory_m_Decode(asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Trajectory_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory;

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Equal(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal1, const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal2);

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		411  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		422  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		433  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		444  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		455  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		466  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		477  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		484  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		495  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		522  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		523  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		518  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BYTES_FOR_ENCODING       1047276 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BITS_FOR_ENCODING        8378208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		524  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		519  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		8080  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		8081  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		8082  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_DepthMap_timestamps;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_vertical_interval;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_horizontal_interval;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_distances;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_remissions;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_DepthMap_timestamps timestamps;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE vertical_projection;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE horizontal_projection;
    asn1SccBase_samples_DepthMap_vertical_interval vertical_interval;
    asn1SccBase_samples_DepthMap_horizontal_interval horizontal_interval;
    asn1SccT_UInt32 vertical_size;
    asn1SccT_UInt32 horizontal_size;
    asn1SccBase_samples_DepthMap_distances distances;
    asn1SccBase_samples_DepthMap_remissions remissions;
} asn1SccBase_samples_DepthMap;

flag asn1SccBase_samples_DepthMap_timestamps_Equal(const asn1SccBase_samples_DepthMap_timestamps* pVal1, const asn1SccBase_samples_DepthMap_timestamps* pVal2);

flag asn1SccBase_samples_DepthMap_vertical_interval_Equal(const asn1SccBase_samples_DepthMap_vertical_interval* pVal1, const asn1SccBase_samples_DepthMap_vertical_interval* pVal2);

flag asn1SccBase_samples_DepthMap_horizontal_interval_Equal(const asn1SccBase_samples_DepthMap_horizontal_interval* pVal1, const asn1SccBase_samples_DepthMap_horizontal_interval* pVal2);

flag asn1SccBase_samples_DepthMap_distances_Equal(const asn1SccBase_samples_DepthMap_distances* pVal1, const asn1SccBase_samples_DepthMap_distances* pVal2);

flag asn1SccBase_samples_DepthMap_remissions_Equal(const asn1SccBase_samples_DepthMap_remissions* pVal1, const asn1SccBase_samples_DepthMap_remissions* pVal2);

flag asn1SccBase_samples_DepthMap_Equal(const asn1SccBase_samples_DepthMap* pVal1, const asn1SccBase_samples_DepthMap* pVal2);

void asn1SccBase_samples_DepthMap_timestamps_Initialize(asn1SccBase_samples_DepthMap_timestamps* pVal);
void asn1SccBase_samples_DepthMap_vertical_interval_Initialize(asn1SccBase_samples_DepthMap_vertical_interval* pVal);
void asn1SccBase_samples_DepthMap_horizontal_interval_Initialize(asn1SccBase_samples_DepthMap_horizontal_interval* pVal);
void asn1SccBase_samples_DepthMap_distances_Initialize(asn1SccBase_samples_DepthMap_distances* pVal);
void asn1SccBase_samples_DepthMap_remissions_Initialize(asn1SccBase_samples_DepthMap_remissions* pVal);
void asn1SccBase_samples_DepthMap_Initialize(asn1SccBase_samples_DepthMap* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3173  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3194  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3215  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3222  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3233  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3244  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3255  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3262  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3273  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3280  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3291  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3302  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES		3313  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3320  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3331  /**/
flag asn1SccBase_samples_DepthMap_IsConstraintValid(const asn1SccBase_samples_DepthMap* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP		3338  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3190  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3216  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3211  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3229  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3240  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3256  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3251  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3274  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3269  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3287  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3298  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3314  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3309  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3332  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3327  /**/
#define asn1SccBase_samples_DepthMap_REQUIRED_BYTES_FOR_ENCODING       12022 
#define asn1SccBase_samples_DepthMap_REQUIRED_BITS_FOR_ENCODING        96170

flag asn1SccBase_samples_DepthMap_Encode(const asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP		3339  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3191  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3217  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3212  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3230  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3241  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3257  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3252  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3275  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3270  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3288  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3299  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3315  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3310  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3333  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3328  /**/
flag asn1SccBase_samples_DepthMap_Decode(asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt32 arr[200];
} asn1SccBase_samples_LaserScan_ranges;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_LaserScan_remission;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_Double start_angle;
    asn1SccT_Double angular_resolution;
    asn1SccT_Double speed;
    asn1SccBase_samples_LaserScan_ranges ranges;
    asn1SccT_UInt32 minrange;
    asn1SccT_UInt32 maxrange;
    asn1SccBase_samples_LaserScan_remission remission;
} asn1SccBase_samples_LaserScan;

flag asn1SccBase_samples_LaserScan_ranges_Equal(const asn1SccBase_samples_LaserScan_ranges* pVal1, const asn1SccBase_samples_LaserScan_ranges* pVal2);

flag asn1SccBase_samples_LaserScan_remission_Equal(const asn1SccBase_samples_LaserScan_remission* pVal1, const asn1SccBase_samples_LaserScan_remission* pVal2);

flag asn1SccBase_samples_LaserScan_Equal(const asn1SccBase_samples_LaserScan* pVal1, const asn1SccBase_samples_LaserScan* pVal2);

void asn1SccBase_samples_LaserScan_ranges_Initialize(asn1SccBase_samples_LaserScan_ranges* pVal);
void asn1SccBase_samples_LaserScan_remission_Initialize(asn1SccBase_samples_LaserScan_remission* pVal);
void asn1SccBase_samples_LaserScan_Initialize(asn1SccBase_samples_LaserScan* pVal);

#define ERR_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3576  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_START_ANGLE		3597  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3608  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_SPEED		3619  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3630  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES		3641  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MINRANGE		3648  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MAXRANGE		3659  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3670  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION		3681  /**/
flag asn1SccBase_samples_LaserScan_IsConstraintValid(const asn1SccBase_samples_LaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN		3688  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_TIME_2		3593  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3604  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3615  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3626  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES		3642  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3637  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3655  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3666  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION		3682  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3677  /**/
#define asn1SccBase_samples_LaserScan_REQUIRED_BYTES_FOR_ENCODING       3457 
#define asn1SccBase_samples_LaserScan_REQUIRED_BITS_FOR_ENCODING        27656

flag asn1SccBase_samples_LaserScan_Encode(const asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN		3689  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_TIME_2		3594  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3605  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3616  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3627  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES		3643  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3638  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3656  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3667  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION		3683  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3678  /**/
flag asn1SccBase_samples_LaserScan_Decode(asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_Sonar_timestamps;

typedef struct {    int nCount; 
    
    asn1SccBase_Angle arr[200];
} asn1SccBase_samples_Sonar_bearings;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_Sonar_bins;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Sonar_timestamps timestamps;
    asn1SccBase_Time bin_duration;
    asn1SccBase_Angle beam_width;
    asn1SccBase_Angle beam_height;
    asn1SccBase_samples_Sonar_bearings bearings;
    asn1SccT_Float speed_of_sound;
    asn1SccT_UInt32 bin_count;
    asn1SccT_UInt32 beam_count;
    asn1SccBase_samples_Sonar_bins bins;
} asn1SccBase_samples_Sonar;

flag asn1SccBase_samples_Sonar_timestamps_Equal(const asn1SccBase_samples_Sonar_timestamps* pVal1, const asn1SccBase_samples_Sonar_timestamps* pVal2);

flag asn1SccBase_samples_Sonar_bearings_Equal(const asn1SccBase_samples_Sonar_bearings* pVal1, const asn1SccBase_samples_Sonar_bearings* pVal2);

flag asn1SccBase_samples_Sonar_bins_Equal(const asn1SccBase_samples_Sonar_bins* pVal1, const asn1SccBase_samples_Sonar_bins* pVal2);

flag asn1SccBase_samples_Sonar_Equal(const asn1SccBase_samples_Sonar* pVal1, const asn1SccBase_samples_Sonar* pVal2);

void asn1SccBase_samples_Sonar_timestamps_Initialize(asn1SccBase_samples_Sonar_timestamps* pVal);
void asn1SccBase_samples_Sonar_bearings_Initialize(asn1SccBase_samples_Sonar_bearings* pVal);
void asn1SccBase_samples_Sonar_bins_Initialize(asn1SccBase_samples_Sonar_bins* pVal);
void asn1SccBase_samples_Sonar_Initialize(asn1SccBase_samples_Sonar* pVal);

#define ERR_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4075  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4096  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS		4117  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4124  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4145  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4166  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4187  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS		4208  /**/
#define ERR_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4215  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_COUNT		4226  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_COUNT		4237  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS_ELM		4248  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS		4259  /**/
flag asn1SccBase_samples_Sonar_IsConstraintValid(const asn1SccBase_samples_Sonar* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR		4266  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIME_2		4092  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4118  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4113  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4141  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4162  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4183  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS		4209  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4204  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4222  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4233  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4244  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS		4260  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4255  /**/
#define asn1SccBase_samples_Sonar_REQUIRED_BYTES_FOR_ENCODING       6866 
#define asn1SccBase_samples_Sonar_REQUIRED_BITS_FOR_ENCODING        54928

flag asn1SccBase_samples_Sonar_Encode(const asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR		4267  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIME_2		4093  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4119  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4114  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4142  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4163  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4184  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS		4210  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4205  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4223  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4234  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4245  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS		4261  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4256  /**/
flag asn1SccBase_samples_Sonar_Decode(asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummyBase_T;


flag asn1SccDummyBase_T_Equal(const asn1SccDummyBase_T* pVal1, const asn1SccDummyBase_T* pVal2);

void asn1SccDummyBase_T_Initialize(asn1SccDummyBase_T* pVal);

#define ERR_DUMMYBASE_T		8108  /**/
flag asn1SccDummyBase_T_IsConstraintValid(const asn1SccDummyBase_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMYBASE_T_2		8115  /**/
#define asn1SccDummyBase_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummyBase_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummyBase_T_Encode(const asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMYBASE_T_2		8116  /**/
flag asn1SccDummyBase_T_Decode(asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy2Base_T;


flag asn1SccDummy2Base_T_Equal(const asn1SccDummy2Base_T* pVal1, const asn1SccDummy2Base_T* pVal2);

void asn1SccDummy2Base_T_Initialize(asn1SccDummy2Base_T* pVal);

#define ERR_DUMMY2BASE_T		1  /**/
flag asn1SccDummy2Base_T_IsConstraintValid(const asn1SccDummy2Base_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY2BASE_T_2_2		12  /**/
#define asn1SccDummy2Base_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy2Base_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy2Base_T_Encode(const asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY2BASE_T_2_2		13  /**/
flag asn1SccDummy2Base_T_Decode(asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		8087  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		8088  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		8089  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		8094  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		8095  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		8096  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_SonarBeam_beam;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Angle bearing;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccT_Float beamwidth_horizontal;
    asn1SccT_Float beamwidth_vertical;
    asn1SccBase_samples_SonarBeam_beam beam;
} asn1SccBase_samples_SonarBeam;

flag asn1SccBase_samples_SonarBeam_beam_Equal(const asn1SccBase_samples_SonarBeam_beam* pVal1, const asn1SccBase_samples_SonarBeam_beam* pVal2);

flag asn1SccBase_samples_SonarBeam_Equal(const asn1SccBase_samples_SonarBeam* pVal1, const asn1SccBase_samples_SonarBeam* pVal2);

void asn1SccBase_samples_SonarBeam_beam_Initialize(asn1SccBase_samples_SonarBeam_beam* pVal);
void asn1SccBase_samples_SonarBeam_Initialize(asn1SccBase_samples_SonarBeam* pVal);

#define ERR_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4272  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4293  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4314  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4325  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4336  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4347  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM_ELM		4358  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM		4369  /**/
flag asn1SccBase_samples_SonarBeam_IsConstraintValid(const asn1SccBase_samples_SonarBeam* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM		4376  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_TIME_2		4289  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4310  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4321  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4332  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4343  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4354  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM		4370  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM_ELM_2		4365  /**/
#define asn1SccBase_samples_SonarBeam_REQUIRED_BYTES_FOR_ENCODING       274 
#define asn1SccBase_samples_SonarBeam_REQUIRED_BITS_FOR_ENCODING        2192

flag asn1SccBase_samples_SonarBeam_Encode(const asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM		4377  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_TIME_2		4290  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4311  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4322  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4333  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4344  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4355  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM		4371  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM_ELM_2		4366  /**/
flag asn1SccBase_samples_SonarBeam_Decode(asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_frame_Frame_image;

typedef struct {    int nCount; 
    
    asn1SccBase_samples_frame_frame_attrib_t arr[200];
} asn1SccBase_samples_frame_Frame_attributes;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Time received_time;
    asn1SccBase_samples_frame_Frame_image image;
    asn1SccBase_samples_frame_Frame_attributes attributes;
    asn1SccBase_samples_frame_frame_size_t size_val;
    asn1SccT_UInt32 data_depth;
    asn1SccT_UInt32 pixel_size;
    asn1SccT_UInt32 row_size;
    asn1SccBase_samples_frame_frame_mode_t frame_mode;
    asn1SccBase_samples_frame_frame_status_t frame_status;
} asn1SccBase_samples_frame_Frame;

flag asn1SccBase_samples_frame_Frame_image_Equal(const asn1SccBase_samples_frame_Frame_image* pVal1, const asn1SccBase_samples_frame_Frame_image* pVal2);

flag asn1SccBase_samples_frame_Frame_attributes_Equal(const asn1SccBase_samples_frame_Frame_attributes* pVal1, const asn1SccBase_samples_frame_Frame_attributes* pVal2);

flag asn1SccBase_samples_frame_Frame_Equal(const asn1SccBase_samples_frame_Frame* pVal1, const asn1SccBase_samples_frame_Frame* pVal2);

void asn1SccBase_samples_frame_Frame_image_Initialize(asn1SccBase_samples_frame_Frame_image* pVal);
void asn1SccBase_samples_frame_Frame_attributes_Initialize(asn1SccBase_samples_frame_Frame_attributes* pVal);
void asn1SccBase_samples_frame_Frame_Initialize(asn1SccBase_samples_frame_Frame* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		4933  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		4954  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM		4975  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE		4986  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		4993  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		5004  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5025  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		5032  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5043  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5064  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5075  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5086  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5097  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5108  /**/
flag asn1SccBase_samples_frame_Frame_IsConstraintValid(const asn1SccBase_samples_frame_Frame* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME		5119  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		4950  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		4971  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4987  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM_2		4982  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5026  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5021  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5060  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5071  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5082  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5093  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5104  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5115  /**/
#define asn1SccBase_samples_frame_Frame_REQUIRED_BYTES_FOR_ENCODING       80635 
#define asn1SccBase_samples_frame_Frame_REQUIRED_BITS_FOR_ENCODING        645078

flag asn1SccBase_samples_frame_Frame_Encode(const asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME		5120  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		4951  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		4972  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4988  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE_ELM_2		4983  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5027  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5022  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5061  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5072  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5083  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5094  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5105  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5116  /**/
flag asn1SccBase_samples_frame_Frame_Decode(asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_frame_Frame first;
    asn1SccBase_samples_frame_Frame second;
    asn1SccT_UInt32 id;
} asn1SccBase_samples_frame_FramePair;

flag asn1SccBase_samples_frame_FramePair_Equal(const asn1SccBase_samples_frame_FramePair* pVal1, const asn1SccBase_samples_frame_FramePair* pVal2);

void asn1SccBase_samples_frame_FramePair_Initialize(asn1SccBase_samples_frame_FramePair* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5125  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5146  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5167  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE_ELM		5188  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5199  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5206  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5217  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5238  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5245  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5256  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5277  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5288  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5299  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5310  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5321  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5342  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5363  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE_ELM		5384  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5395  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5402  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5413  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5434  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5441  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5452  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5473  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5484  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5495  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5506  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5517  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5538  /**/
flag asn1SccBase_samples_frame_FramePair_IsConstraintValid(const asn1SccBase_samples_frame_FramePair* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5549  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5142  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5338  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5534  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5545  /**/
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BYTES_FOR_ENCODING       161282 
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BITS_FOR_ENCODING        1290252

flag asn1SccBase_samples_frame_FramePair_Encode(const asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5550  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5143  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5339  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5535  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5546  /**/
flag asn1SccBase_samples_frame_FramePair_Decode(asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		8101  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		8102  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		8103  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[200];
} asn1SccBase_samples_SonarScan_data;

typedef struct {    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_SonarScan_time_beams;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_SonarScan_data data;
    asn1SccBase_samples_SonarScan_time_beams time_beams;
    asn1SccT_UInt16 number_of_beams;
    asn1SccT_UInt16 number_of_bins;
    asn1SccBase_Angle start_bearing;
    asn1SccBase_Angle angular_resolution;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccBase_Angle beamwidth_horizontal;
    asn1SccBase_Angle beamwidth_vertical;
    asn1SccT_Boolean memory_layout_column;
    asn1SccT_Boolean polar_coordinates;
} asn1SccBase_samples_SonarScan;

flag asn1SccBase_samples_SonarScan_data_Equal(const asn1SccBase_samples_SonarScan_data* pVal1, const asn1SccBase_samples_SonarScan_data* pVal2);

flag asn1SccBase_samples_SonarScan_time_beams_Equal(const asn1SccBase_samples_SonarScan_time_beams* pVal1, const asn1SccBase_samples_SonarScan_time_beams* pVal2);

flag asn1SccBase_samples_SonarScan_Equal(const asn1SccBase_samples_SonarScan* pVal1, const asn1SccBase_samples_SonarScan* pVal2);

void asn1SccBase_samples_SonarScan_data_Initialize(asn1SccBase_samples_SonarScan_data* pVal);
void asn1SccBase_samples_SonarScan_time_beams_Initialize(asn1SccBase_samples_SonarScan_time_beams* pVal);
void asn1SccBase_samples_SonarScan_Initialize(asn1SccBase_samples_SonarScan* pVal);

#define ERR_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4382  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA_ELM		4403  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA		4414  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4421  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4442  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4449  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4460  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4471  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4492  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4513  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4524  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4535  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4556  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4577  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4588  /**/
flag asn1SccBase_samples_SonarScan_IsConstraintValid(const asn1SccBase_samples_SonarScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN		4599  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_2		4399  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA		4415  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA_ELM_2		4410  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4443  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4438  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4456  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4467  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4488  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4509  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4520  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4531  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4552  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4573  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4584  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4595  /**/
#define asn1SccBase_samples_SonarScan_REQUIRED_BYTES_FOR_ENCODING       1893 
#define asn1SccBase_samples_SonarScan_REQUIRED_BITS_FOR_ENCODING        15138

flag asn1SccBase_samples_SonarScan_Encode(const asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN		4600  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_2		4400  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA		4416  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA_ELM_2		4411  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4444  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4439  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4457  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4468  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4489  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4510  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4521  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4532  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4553  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4574  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4585  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4596  /**/
flag asn1SccBase_samples_SonarScan_Decode(asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccT_UInt32 numT_String;
extern const asn1SccT_UInt32 vizkit3d_PathMaxSize;
extern const asn1SccT_UInt32 vizkit3d_LabelMaxSize;
extern const asn1SccT_UInt32 numBase_JointTrajectory;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_JointTransform;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Waypoint;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Wrench;
extern const asn1SccT_UInt32 numStd_vector_Wrappers_Vector4d;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Trajectory;
extern const asn1SccT_UInt32 numBase_JointLimits_names;
extern const asn1SccT_UInt32 numBase_JointLimits_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_names;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_times_val;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointState_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_elements;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_timestamps;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_vertical_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_horizontal_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_distances;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_remissions;
extern const asn1SccT_UInt32 numBase_samples_DistanceImage_data;
extern const asn1SccT_UInt32 numBase_commands_Joints_names;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_ranges;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_remission;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_colors;
extern const asn1SccT_UInt32 numBase_samples_Sonar_timestamps;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bearings;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bins;
extern const asn1SccT_UInt32 numBase_samples_SonarBeam_beam;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_data;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_time_beams;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_names;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_elements;
extern const asn1SccT_UInt32 numBase_JointTransformVector_names;
extern const asn1SccT_UInt32 numBase_JointTransformVector_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_elements;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_image;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_attributes;
extern const asn1SccT_UInt32 numWrappers_MatrixXd_data;
extern const asn1SccT_UInt32 numWrappers_VectorXd_data;
extern const asn1SccT_UInt32 numBase_JointTransformVector_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_JointTransform_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_Wrench_m_names;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_colors;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_m_names;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_knots;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_vertices; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif